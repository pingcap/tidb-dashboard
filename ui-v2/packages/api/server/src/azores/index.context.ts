/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Azores Open API
 * OpenAPI spec version: 2.0.0
 */
import type { Context, Env } from 'hono';


// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;

import { ApiKeyServiceListApiKeysParams,
V2CreateApiKeyRequest,
ApiKeyServiceUpdateApiKeyBody,
GlobalBRServiceListBackupPoliciesParams,
V2BackupPolicyBody,
GlobalBRServiceUpdateBackupPolicyBody,
GlobalBRServiceGetBRSummaryParams,
GlobalBRServiceListBRTasksParams,
GlobalBRServiceDeleteBRTaskParams,
ClusterBRServiceCreateBackupTaskBody,
ClusterBRServiceListClusterBackupRecordsParams,
ClusterBRServiceCreateRestoreTaskBody,
ClusterBRServiceListClusterBRTasksParams,
MetricsServiceGetClusterMetricDataParams,
DiagnosisServiceGetSlowQueryListParams,
DiagnosisServiceDownloadSlowQueryListParams,
DiagnosisServiceGetSlowQueryDetailParams,
DiagnosisServiceAddSqlLimitBody,
DiagnosisServiceRemoveSqlLimitBody,
DiagnosisServiceGetSqlLimitListParams,
DiagnosisServiceGetSqlPlanListParams,
DiagnosisServiceGetSqlPlanBindingListParams,
DiagnosisServiceUnbindSqlPlanParams,
DiagnosisServiceGetTopSqlListParams,
DiagnosisServiceUpdateTopSqlConfigsBody,
DiagnosisServiceGetTopSqlDetailParams,
CredentialServiceListCredentialsParams,
V2Credential,
CredentialServiceUpdateCredentialBody,
V2GenerateRSAKeyRequest,
V2ValidateConnectionRequest,
HostServiceListHostsParams,
V2CreateHost,
HostServiceImportBody,
HostServiceHostConfirmBody,
V2HostServiceUpdateHostBody,
MetricsServiceGetHostMetricDataParams,
V2BatchDeleteRequest,
HostServiceDownloadListHostsParams,
LicenseServiceActivateLicenseBody,
LocationServiceListLocationsParams,
V2Locations,
LocationServiceUpdateLocationsBody,
V2LoginRequest,
MetricsServiceGetMetricsParams,
MetricsServiceGetTopMetricDataParams,
MetricsServiceGetOverviewStatusParams,
RoleServiceListRolesParams,
V2Role,
RoleServiceUpdateRoleBody,
TagServiceListTagsParams,
Tagv2Tag,
TagServiceUpdateTagBody,
V2BatchCreateTagsRequest,
V2BindResourceRequest,
V2BindTagRequest,
TagServiceListTagsByResourceTypeParams,
TagServiceListTagKeysParams,
TagServiceListTagsWithBindingsParams,
TiupsServiceListTiupsParams,
Tiupv2CreateTiups,
V2TiupsServiceUpdateTiupsBody,
UserServiceListUsersParams,
V2User,
UserServiceUpdateUserBody,
UserServiceResetPasswordBody,
V2ChangePasswordRequest } from './index.schemas';

export type ApiKeyServiceListApiKeysContext<E extends Env = any> = Context<E, '/api/v2/apiKeys', { in: { query: ApiKeyServiceListApiKeysParams, }, out: { query: ApiKeyServiceListApiKeysParams, } }>
export type ApiKeyServiceCreateApiKeyContext<E extends Env = any> = Context<E, '/api/v2/apiKeys', { in: { json: V2CreateApiKeyRequest, }, out: { json: V2CreateApiKeyRequest, } }>
export type ApiKeyServiceGetApiKeyContext<E extends Env = any> = Context<E, '/api/v2/apiKeys/:accessKey', { in: { param: {
 accessKey: string,
 }, }, out: { param: {
 accessKey: string,
 }, } }>
export type ApiKeyServiceDeleteApiKeyContext<E extends Env = any> = Context<E, '/api/v2/apiKeys/:accessKey', { in: { param: {
 accessKey: string,
 }, }, out: { param: {
 accessKey: string,
 }, } }>
export type ApiKeyServiceUpdateApiKeyContext<E extends Env = any> = Context<E, '/api/v2/apiKeys/:accessKey', { in: { param: {
 accessKey: string,
 },json: ApiKeyServiceUpdateApiKeyBody, }, out: { param: {
 accessKey: string,
 },json: ApiKeyServiceUpdateApiKeyBody, } }>
export type ApiKeyServiceResetSecretKeyContext<E extends Env = any> = Context<E, '/api/v2/apiKeys/:accessKey:resetSecretKey', { in: { param: {
 accessKey: string,
 }, }, out: { param: {
 accessKey: string,
 }, } }>
export type GlobalBRServiceListBackupPoliciesContext<E extends Env = any> = Context<E, '/api/v2/backup/policies', { in: { query: GlobalBRServiceListBackupPoliciesParams, }, out: { query: GlobalBRServiceListBackupPoliciesParams, } }>
export type GlobalBRServiceCreateBackupPolicyContext<E extends Env = any> = Context<E, '/api/v2/backup/policies', { in: { json: V2BackupPolicyBody, }, out: { json: V2BackupPolicyBody, } }>
export type GlobalBRServicePreCheckBackupPolicyContext<E extends Env = any> = Context<E, '/api/v2/backup/policies/precheck', { in: { json: V2BackupPolicyBody, }, out: { json: V2BackupPolicyBody, } }>
export type GlobalBRServiceGetBackupPolicyContext<E extends Env = any> = Context<E, '/api/v2/backup/policies/:policyId', { in: { param: {
 policyId: string,
 }, }, out: { param: {
 policyId: string,
 }, } }>
export type GlobalBRServiceDeleteBackupPolicyContext<E extends Env = any> = Context<E, '/api/v2/backup/policies/:policyId', { in: { param: {
 policyId: string,
 }, }, out: { param: {
 policyId: string,
 }, } }>
export type GlobalBRServiceUpdateBackupPolicyContext<E extends Env = any> = Context<E, '/api/v2/backup/policies/:policyId', { in: { param: {
 policyId: string,
 },json: GlobalBRServiceUpdateBackupPolicyBody, }, out: { param: {
 policyId: string,
 },json: GlobalBRServiceUpdateBackupPolicyBody, } }>
export type GlobalBRServiceGetBRSummaryContext<E extends Env = any> = Context<E, '/api/v2/backup/summary', { in: { query: GlobalBRServiceGetBRSummaryParams, }, out: { query: GlobalBRServiceGetBRSummaryParams, } }>
export type GlobalBRServiceListBRTasksContext<E extends Env = any> = Context<E, '/api/v2/backup/tasks', { in: { query: GlobalBRServiceListBRTasksParams, }, out: { query: GlobalBRServiceListBRTasksParams, } }>
export type GlobalBRServiceDeleteBRTaskContext<E extends Env = any> = Context<E, '/api/v2/backup/tasks/:taskId', { in: { param: {
 taskId: string,
 },query: GlobalBRServiceDeleteBRTaskParams, }, out: { param: {
 taskId: string,
 },query: GlobalBRServiceDeleteBRTaskParams, } }>
export type GlobalBRServiceStartBRTaskContext<E extends Env = any> = Context<E, '/api/v2/backup/tasks/:taskId/start', { in: { param: {
 taskId: string,
 }, }, out: { param: {
 taskId: string,
 }, } }>
export type GlobalBRServiceStopBRTaskContext<E extends Env = any> = Context<E, '/api/v2/backup/tasks/:taskId/stop', { in: { param: {
 taskId: string,
 }, }, out: { param: {
 taskId: string,
 }, } }>
export type ClusterBRServiceCreateBackupTaskContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/backup', { in: { param: {
 clusterId: string,
 },json: ClusterBRServiceCreateBackupTaskBody, }, out: { param: {
 clusterId: string,
 },json: ClusterBRServiceCreateBackupTaskBody, } }>
export type ClusterBRServiceGetClusterBackupPolicyContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/backup/policy', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type ClusterBRServiceListClusterBackupRecordsContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/backup/records', { in: { param: {
 clusterId: string,
 },query: ClusterBRServiceListClusterBackupRecordsParams, }, out: { param: {
 clusterId: string,
 },query: ClusterBRServiceListClusterBackupRecordsParams, } }>
export type ClusterBRServiceCreateRestoreTaskContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/backup/restore', { in: { param: {
 clusterId: string,
 },json: ClusterBRServiceCreateRestoreTaskBody, }, out: { param: {
 clusterId: string,
 },json: ClusterBRServiceCreateRestoreTaskBody, } }>
export type ClusterBRServiceListClusterBRTasksContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/backup/tasks', { in: { param: {
 clusterId: string,
 },query: ClusterBRServiceListClusterBRTasksParams, }, out: { param: {
 clusterId: string,
 },query: ClusterBRServiceListClusterBRTasksParams, } }>
export type ClusterBRServiceDetectClusterContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/backup:detect', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type MetricsServiceGetClusterMetricDataContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/metrics/:name/data', { in: { param: {
 clusterId: string,
    name: string,
 },query: MetricsServiceGetClusterMetricDataParams, }, out: { param: {
 clusterId: string,
    name: string,
 },query: MetricsServiceGetClusterMetricDataParams, } }>
export type MetricsServiceGetClusterMetricInstanceContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/metrics/:name/instance', { in: { param: {
 clusterId: string,
    name: string,
 }, }, out: { param: {
 clusterId: string,
    name: string,
 }, } }>
export type DiagnosisServiceGetResourceGroupListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/resourcegroups', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type ClusterServiceGetProcessListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sessions', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type ClusterServiceDeleteProcessContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sessions/:sessionId', { in: { param: {
 clusterId: string,
    sessionId: string,
 }, }, out: { param: {
 clusterId: string,
    sessionId: string,
 }, } }>
export type DiagnosisServiceGetSlowQueryListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSlowQueryListParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSlowQueryListParams, } }>
export type DiagnosisServiceGetSlowQueryAvailableAdvancedFiltersContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/advancedFilters', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type DiagnosisServiceGetSlowQueryAvailableAdvancedFilterInfoContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/advancedFilters/:filterName', { in: { param: {
 clusterId: string,
    filterName: string,
 }, }, out: { param: {
 clusterId: string,
    filterName: string,
 }, } }>
export type DiagnosisServiceDownloadSlowQueryListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/download', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceDownloadSlowQueryListParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceDownloadSlowQueryListParams, } }>
export type DiagnosisServiceGetSlowQueryAvailableFieldsContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/fields', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type DiagnosisServiceGetSlowQueryDetailContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/:digest', { in: { param: {
 clusterId: string,
    digest: string,
 },query: DiagnosisServiceGetSlowQueryDetailParams, }, out: { param: {
 clusterId: string,
    digest: string,
 },query: DiagnosisServiceGetSlowQueryDetailParams, } }>
export type DiagnosisServiceAddSqlLimitContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqllimits:addSqlLimit', { in: { param: {
 clusterId: string,
 },json: DiagnosisServiceAddSqlLimitBody, }, out: { param: {
 clusterId: string,
 },json: DiagnosisServiceAddSqlLimitBody, } }>
export type DiagnosisServiceCheckSqlLimitSupportContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqllimits:checkSupport', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type DiagnosisServiceRemoveSqlLimitContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqllimits:removeSqlLimit', { in: { param: {
 clusterId: string,
 },json: DiagnosisServiceRemoveSqlLimitBody, }, out: { param: {
 clusterId: string,
 },json: DiagnosisServiceRemoveSqlLimitBody, } }>
export type DiagnosisServiceGetSqlLimitListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqllimits:showSqlLimit', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSqlLimitListParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSqlLimitListParams, } }>
export type DiagnosisServiceGetSqlPlanListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSqlPlanListParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSqlPlanListParams, } }>
export type DiagnosisServiceBindSqlPlanContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans/:planDigest:bindSqlPlan', { in: { param: {
 clusterId: string,
    planDigest: string,
 }, }, out: { param: {
 clusterId: string,
    planDigest: string,
 }, } }>
export type DiagnosisServiceCheckSqlPlanSupportContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans:checkSupport', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type DiagnosisServiceGetSqlPlanBindingListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans:showSqlPlanBinding', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSqlPlanBindingListParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSqlPlanBindingListParams, } }>
export type DiagnosisServiceUnbindSqlPlanContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans:unbindSqlPlan', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceUnbindSqlPlanParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceUnbindSqlPlanParams, } }>
export type DiagnosisServiceGetTopSqlListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetTopSqlListParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetTopSqlListParams, } }>
export type DiagnosisServiceGetTopSqlAvailableAdvancedFiltersContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls/advancedFilters', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type DiagnosisServiceGetTopSqlAvailableAdvancedFilterInfoContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls/advancedFilters/:filterName', { in: { param: {
 clusterId: string,
    filterName: string,
 }, }, out: { param: {
 clusterId: string,
    filterName: string,
 }, } }>
export type DiagnosisServiceGetTopSqlConfigsContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls/configs', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type DiagnosisServiceUpdateTopSqlConfigsContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls/configs', { in: { param: {
 clusterId: string,
 },json: DiagnosisServiceUpdateTopSqlConfigsBody, }, out: { param: {
 clusterId: string,
 },json: DiagnosisServiceUpdateTopSqlConfigsBody, } }>
export type DiagnosisServiceGetTopSqlAvailableFieldsContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls/fields', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type DiagnosisServiceGetTopSqlDetailContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls/:digest', { in: { param: {
 clusterId: string,
    digest: string,
 },query: DiagnosisServiceGetTopSqlDetailParams, }, out: { param: {
 clusterId: string,
    digest: string,
 },query: DiagnosisServiceGetTopSqlDetailParams, } }>
export type CredentialServiceListCredentialsContext<E extends Env = any> = Context<E, '/api/v2/credentials', { in: { query: CredentialServiceListCredentialsParams, }, out: { query: CredentialServiceListCredentialsParams, } }>
export type CredentialServiceCreateCredentialContext<E extends Env = any> = Context<E, '/api/v2/credentials', { in: { json: V2Credential, }, out: { json: V2Credential, } }>
export type CredentialServiceGetCredentialContext<E extends Env = any> = Context<E, '/api/v2/credentials/:credentialId', { in: { param: {
 credentialId: string,
 }, }, out: { param: {
 credentialId: string,
 }, } }>
export type CredentialServiceDeleteCredentialContext<E extends Env = any> = Context<E, '/api/v2/credentials/:credentialId', { in: { param: {
 credentialId: string,
 }, }, out: { param: {
 credentialId: string,
 }, } }>
export type CredentialServiceUpdateCredentialContext<E extends Env = any> = Context<E, '/api/v2/credentials/:credentialId', { in: { param: {
 credentialId: string,
 },json: CredentialServiceUpdateCredentialBody, }, out: { param: {
 credentialId: string,
 },json: CredentialServiceUpdateCredentialBody, } }>
export type CredentialServiceDownloadRSAKeyContext<E extends Env = any> = Context<E, '/api/v2/credentials/:credentialId:downloadRsaKey', { in: { param: {
 credentialId: string,
 }, }, out: { param: {
 credentialId: string,
 }, } }>
export type CredentialServiceGenerateRSAKeyContext<E extends Env = any> = Context<E, '/api/v2/credentials:generateRsaKey', { in: { json: V2GenerateRSAKeyRequest, }, out: { json: V2GenerateRSAKeyRequest, } }>
export type CredentialServiceValidateConnectionContext<E extends Env = any> = Context<E, '/api/v2/credentials:validateConnection', { in: { json: V2ValidateConnectionRequest, }, out: { json: V2ValidateConnectionRequest, } }>
export type HostServiceListHostsContext<E extends Env = any> = Context<E, '/api/v2/hosts', { in: { query: HostServiceListHostsParams, }, out: { query: HostServiceListHostsParams, } }>
export type HostServiceCreateHostsContext<E extends Env = any> = Context<E, '/api/v2/hosts', { in: { json: V2CreateHost, }, out: { json: V2CreateHost, } }>
export type HostServiceImportContext<E extends Env = any> = Context<E, '/api/v2/hosts/import/tasks', { in: { json: HostServiceImportBody, }, out: { json: HostServiceImportBody, } }>
export type HostServiceImportTaskContext<E extends Env = any> = Context<E, '/api/v2/hosts/import/tasks/:taskId', { in: { param: {
 taskId: string,
 }, }, out: { param: {
 taskId: string,
 }, } }>
export type HostServiceHostConfirmContext<E extends Env = any> = Context<E, '/api/v2/hosts/import/tasks/:taskId:confirm', { in: { param: {
 taskId: string,
 },json: HostServiceHostConfirmBody, }, out: { param: {
 taskId: string,
 },json: HostServiceHostConfirmBody, } }>
export type HostServiceGetHostContext<E extends Env = any> = Context<E, '/api/v2/hosts/:hostId', { in: { param: {
 hostId: string,
 }, }, out: { param: {
 hostId: string,
 }, } }>
export type HostServiceDeleteContext<E extends Env = any> = Context<E, '/api/v2/hosts/:hostId', { in: { param: {
 hostId: string,
 }, }, out: { param: {
 hostId: string,
 }, } }>
export type HostServiceUpdateHostContext<E extends Env = any> = Context<E, '/api/v2/hosts/:hostId', { in: { param: {
 hostId: string,
 },json: V2HostServiceUpdateHostBody, }, out: { param: {
 hostId: string,
 },json: V2HostServiceUpdateHostBody, } }>
export type HostServiceGetDisksContext<E extends Env = any> = Context<E, '/api/v2/hosts/:hostId/disks', { in: { param: {
 hostId: string,
 }, }, out: { param: {
 hostId: string,
 }, } }>
export type MetricsServiceGetHostMetricDataContext<E extends Env = any> = Context<E, '/api/v2/hosts/:hostId/metrics/:name/data', { in: { param: {
 hostId: string,
    name: string,
 },query: MetricsServiceGetHostMetricDataParams, }, out: { param: {
 hostId: string,
    name: string,
 },query: MetricsServiceGetHostMetricDataParams, } }>
export type HostServiceReportContext<E extends Env = any> = Context<E, '/api/v2/hosts/:hostId/report/:reportId', { in: { param: {
 hostId: string,
    reportId: string,
 }, }, out: { param: {
 hostId: string,
    reportId: string,
 }, } }>
export type HostServiceGetTiDBProcessesContext<E extends Env = any> = Context<E, '/api/v2/hosts/:hostId/tidbProcesses', { in: { param: {
 hostId: string,
 }, }, out: { param: {
 hostId: string,
 }, } }>
export type HostServiceFixContext<E extends Env = any> = Context<E, '/api/v2/hosts/:hostId:fix', { in: { param: {
 hostId: string,
 }, }, out: { param: {
 hostId: string,
 }, } }>
export type HostServiceCheckContext<E extends Env = any> = Context<E, '/api/v2/hosts/:hostId:systemCheck', { in: { param: {
 hostId: string,
 }, }, out: { param: {
 hostId: string,
 }, } }>
export type HostServiceBatchDeleteContext<E extends Env = any> = Context<E, '/api/v2/hosts:batchDelete', { in: { json: V2BatchDeleteRequest, }, out: { json: V2BatchDeleteRequest, } }>
export type HostServiceDownloadListHostsContext<E extends Env = any> = Context<E, '/api/v2/hosts:download', { in: { query: HostServiceDownloadListHostsParams, }, out: { query: HostServiceDownloadListHostsParams, } }>
export type HostServiceDownloadHostTemplateContext<E extends Env = any> = Context<E, '/api/v2/hosts:downloadHostTemplate'>
export type LicenseServiceGetLicenseContext<E extends Env = any> = Context<E, '/api/v2/license'>
export type LicenseServiceGetDeviceCodeContext<E extends Env = any> = Context<E, '/api/v2/license/devicecode'>
export type LicenseServiceActivateLicenseContext<E extends Env = any> = Context<E, '/api/v2/license:activate', { in: { json: LicenseServiceActivateLicenseBody, }, out: { json: LicenseServiceActivateLicenseBody, } }>
export type LicenseServiceActivateFreeLicenseContext<E extends Env = any> = Context<E, '/api/v2/license:trial'>
export type LocationServiceListLocationsContext<E extends Env = any> = Context<E, '/api/v2/locations', { in: { query: LocationServiceListLocationsParams, }, out: { query: LocationServiceListLocationsParams, } }>
export type LocationServiceCreateLocationsContext<E extends Env = any> = Context<E, '/api/v2/locations', { in: { json: V2Locations, }, out: { json: V2Locations, } }>
export type LocationServiceGetLocationsContext<E extends Env = any> = Context<E, '/api/v2/locations/:locationId', { in: { param: {
 locationId: string,
 }, }, out: { param: {
 locationId: string,
 }, } }>
export type LocationServiceDeleteLocationContext<E extends Env = any> = Context<E, '/api/v2/locations/:locationId', { in: { param: {
 locationId: string,
 }, }, out: { param: {
 locationId: string,
 }, } }>
export type LocationServiceUpdateLocationsContext<E extends Env = any> = Context<E, '/api/v2/locations/:locationId', { in: { param: {
 locationId: string,
 },json: LocationServiceUpdateLocationsBody, }, out: { param: {
 locationId: string,
 },json: LocationServiceUpdateLocationsBody, } }>
export type UserServiceLoginContext<E extends Env = any> = Context<E, '/api/v2/login', { in: { json: V2LoginRequest, }, out: { json: V2LoginRequest, } }>
export type UserServiceLogoutContext<E extends Env = any> = Context<E, '/api/v2/logout'>
export type MetricsServiceGetMetricsContext<E extends Env = any> = Context<E, '/api/v2/metrics', { in: { query: MetricsServiceGetMetricsParams, }, out: { query: MetricsServiceGetMetricsParams, } }>
export type MetricsServiceGetTopMetricConfigContext<E extends Env = any> = Context<E, '/api/v2/overview/metrics/config'>
export type MetricsServiceGetTopMetricDataContext<E extends Env = any> = Context<E, '/api/v2/overview/metrics/:name/data', { in: { param: {
 name: string,
 },query: MetricsServiceGetTopMetricDataParams, }, out: { param: {
 name: string,
 },query: MetricsServiceGetTopMetricDataParams, } }>
export type MetricsServiceGetOverviewStatusContext<E extends Env = any> = Context<E, '/api/v2/overview/status', { in: { query: MetricsServiceGetOverviewStatusParams, }, out: { query: MetricsServiceGetOverviewStatusParams, } }>
export type RoleServiceListRolesContext<E extends Env = any> = Context<E, '/api/v2/roles', { in: { query: RoleServiceListRolesParams, }, out: { query: RoleServiceListRolesParams, } }>
export type RoleServiceCreateRoleContext<E extends Env = any> = Context<E, '/api/v2/roles', { in: { json: NonReadonly<V2Role>, }, out: { json: NonReadonly<V2Role>, } }>
export type RoleServiceDeleteRoleContext<E extends Env = any> = Context<E, '/api/v2/roles/:roleId', { in: { param: {
 roleId: number,
 }, }, out: { param: {
 roleId: number,
 }, } }>
export type RoleServiceUpdateRoleContext<E extends Env = any> = Context<E, '/api/v2/roles/:roleId', { in: { param: {
 roleId: number,
 },json: RoleServiceUpdateRoleBody, }, out: { param: {
 roleId: number,
 },json: RoleServiceUpdateRoleBody, } }>
export type TagServiceListTagsContext<E extends Env = any> = Context<E, '/api/v2/tags', { in: { query: TagServiceListTagsParams, }, out: { query: TagServiceListTagsParams, } }>
export type TagServiceCreateTagContext<E extends Env = any> = Context<E, '/api/v2/tags', { in: { json: Tagv2Tag, }, out: { json: Tagv2Tag, } }>
export type TagServiceGetTagContext<E extends Env = any> = Context<E, '/api/v2/tags/:tagId', { in: { param: {
 tagId: string,
 }, }, out: { param: {
 tagId: string,
 }, } }>
export type TagServiceDeleteTagContext<E extends Env = any> = Context<E, '/api/v2/tags/:tagId', { in: { param: {
 tagId: string,
 }, }, out: { param: {
 tagId: string,
 }, } }>
export type TagServiceUpdateTagContext<E extends Env = any> = Context<E, '/api/v2/tags/:tagId', { in: { param: {
 tagId: string,
 },json: TagServiceUpdateTagBody, }, out: { param: {
 tagId: string,
 },json: TagServiceUpdateTagBody, } }>
export type TagServiceGetTagWithBindingsContext<E extends Env = any> = Context<E, '/api/v2/tags/:tagId:getWithBindings', { in: { param: {
 tagId: string,
 }, }, out: { param: {
 tagId: string,
 }, } }>
export type TagServiceBatchCreateTagsContext<E extends Env = any> = Context<E, '/api/v2/tags:batchCreate', { in: { json: V2BatchCreateTagsRequest, }, out: { json: V2BatchCreateTagsRequest, } }>
export type TagServiceBindResourceContext<E extends Env = any> = Context<E, '/api/v2/tags:bindResource', { in: { json: V2BindResourceRequest, }, out: { json: V2BindResourceRequest, } }>
export type TagServiceBindTagContext<E extends Env = any> = Context<E, '/api/v2/tags:bindTag', { in: { json: V2BindTagRequest, }, out: { json: V2BindTagRequest, } }>
export type TagServiceListTagsByResourceTypeContext<E extends Env = any> = Context<E, '/api/v2/tags:listByResourceType', { in: { query: TagServiceListTagsByResourceTypeParams, }, out: { query: TagServiceListTagsByResourceTypeParams, } }>
export type TagServiceListTagKeysContext<E extends Env = any> = Context<E, '/api/v2/tags:listKeys', { in: { query: TagServiceListTagKeysParams, }, out: { query: TagServiceListTagKeysParams, } }>
export type TagServiceListTagsWithBindingsContext<E extends Env = any> = Context<E, '/api/v2/tags:listWithBindings', { in: { query: TagServiceListTagsWithBindingsParams, }, out: { query: TagServiceListTagsWithBindingsParams, } }>
export type TiupsServiceListTiupsContext<E extends Env = any> = Context<E, '/api/v2/tiups', { in: { query: TiupsServiceListTiupsParams, }, out: { query: TiupsServiceListTiupsParams, } }>
export type TiupsServiceCreateTiupsContext<E extends Env = any> = Context<E, '/api/v2/tiups', { in: { json: Tiupv2CreateTiups, }, out: { json: Tiupv2CreateTiups, } }>
export type TiupsServiceGetTiupsContext<E extends Env = any> = Context<E, '/api/v2/tiups/:tiupId', { in: { param: {
 tiupId: string,
 }, }, out: { param: {
 tiupId: string,
 }, } }>
export type TiupsServiceDeleteTiupsContext<E extends Env = any> = Context<E, '/api/v2/tiups/:tiupId', { in: { param: {
 tiupId: string,
 }, }, out: { param: {
 tiupId: string,
 }, } }>
export type TiupsServiceUpdateTiupsContext<E extends Env = any> = Context<E, '/api/v2/tiups/:tiupId', { in: { param: {
 tiupId: string,
 },json: V2TiupsServiceUpdateTiupsBody, }, out: { param: {
 tiupId: string,
 },json: V2TiupsServiceUpdateTiupsBody, } }>
export type TiupsServiceGetTiupsClusterContext<E extends Env = any> = Context<E, '/api/v2/tiups/:tiupId/clusters', { in: { param: {
 tiupId: string,
 }, }, out: { param: {
 tiupId: string,
 }, } }>
export type UserServiceListUsersContext<E extends Env = any> = Context<E, '/api/v2/users', { in: { query: UserServiceListUsersParams, }, out: { query: UserServiceListUsersParams, } }>
export type UserServiceCreateUserContext<E extends Env = any> = Context<E, '/api/v2/users', { in: { json: NonReadonly<V2User>, }, out: { json: NonReadonly<V2User>, } }>
export type UserServiceGetUserProfileContext<E extends Env = any> = Context<E, '/api/v2/users/profile'>
export type UserServiceGetUserContext<E extends Env = any> = Context<E, '/api/v2/users/:userId', { in: { param: {
 userId: string,
 }, }, out: { param: {
 userId: string,
 }, } }>
export type UserServiceDeleteUserContext<E extends Env = any> = Context<E, '/api/v2/users/:userId', { in: { param: {
 userId: string,
 }, }, out: { param: {
 userId: string,
 }, } }>
export type UserServiceUpdateUserContext<E extends Env = any> = Context<E, '/api/v2/users/:userId', { in: { param: {
 userId: string,
 },json: UserServiceUpdateUserBody, }, out: { param: {
 userId: string,
 },json: UserServiceUpdateUserBody, } }>
export type UserServiceResetPasswordContext<E extends Env = any> = Context<E, '/api/v2/users/:userId:resetPassword', { in: { param: {
 userId: string,
 },json: UserServiceResetPasswordBody, }, out: { param: {
 userId: string,
 },json: UserServiceResetPasswordBody, } }>
export type UserServiceChangePasswordContext<E extends Env = any> = Context<E, '/api/v2/users:changePassword', { in: { json: V2ChangePasswordRequest, }, out: { json: V2ChangePasswordRequest, } }>
export type UserServiceValidateSessionContext<E extends Env = any> = Context<E, '/api/v2/users:validateSession'>
export type ApiKeyServiceGetTemErrorDetailContext<E extends Env = any> = Context<E, '/documentation/errorDetail'>