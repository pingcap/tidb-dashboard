/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Azores Open API
 * OpenAPI spec version: 2.0.0
 */
export type UserServiceChangePassword200 = { [key: string]: unknown };

export type UserServiceResetPassword200 = { [key: string]: unknown };

export type UserServiceDeleteUser200 = { [key: string]: unknown };

export type UserServiceListUsersParams = {
/**
 * The number of users to retrieve per page.
 */
pageSize?: number;
/**
 * Pagination token for retrieving the next page of users.
 */
pageToken?: string;
/**
 * The number of users to skip for pagination purposes.
 */
skip?: number;
/**
 * The sorting criteria for the user list.
 */
orderBy?: string;
/**
 * Filter users by username using a "like" operation.
 */
nameLike?: string;
/**
 * Filter users by email using a "like" operation.
 */
emailLike?: string;
/**
 * Filter users by role name.
 */
roleName?: string;
};

export type TiupsServiceDeleteTiups200 = { [key: string]: unknown };

export type TiupsServiceListTiupsParams = {
/**
 * page size
 */
pageSize?: number;
/**
 * page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
/**
 * the Tiups key of the Tiups
 */
searchValue?: string;
/**
 * the Tiups tag_ids of the tagIds
 */
tagIds?: string[];
/**
 * the Tiups host_ids of the tagIds
 */
hostIds?: string[];
};

export type TagServiceListTagsWithBindingsParams = {
/**
 * page size
 */
pageSize?: number;
/**
 * page token
 */
pageToken?: string;
/**
 * skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
/**
 * the tag which the tag key in
 */
tagKeys?: string[];
/**
 * the tag which the tag value like
 */
tagValueLike?: string;
};

export type TagServiceListTagKeysResourceType = typeof TagServiceListTagKeysResourceType[keyof typeof TagServiceListTagKeysResourceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TagServiceListTagKeysResourceType = {
  TAG_BIND_RESOURCE_TYPE_UNSPECIFIED: 'TAG_BIND_RESOURCE_TYPE_UNSPECIFIED',
  HOST: 'HOST',
  TIUP: 'TIUP',
  CLUSTER: 'CLUSTER',
} as const;

export type TagServiceListTagKeysParams = {
/**
 * page size
 */
pageSize?: number;
/**
 * page token
 */
pageToken?: string;
/**
 * skip
 */
skip?: number;
/**
 * the keyword which tag key similar to
 */
keyword?: string;
/**
 * the resource type of the tag has bound with

 - TAG_BIND_RESOURCE_TYPE_UNSPECIFIED: resource type unspecified
 - HOST: resource type host
 - TIUP: resource type tiup
 - CLUSTER: resource type cluster
 */
resourceType?: TagServiceListTagKeysResourceType;
};

export type TagServiceListTagsByResourceTypeResourceType = typeof TagServiceListTagsByResourceTypeResourceType[keyof typeof TagServiceListTagsByResourceTypeResourceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TagServiceListTagsByResourceTypeResourceType = {
  TAG_BIND_RESOURCE_TYPE_UNSPECIFIED: 'TAG_BIND_RESOURCE_TYPE_UNSPECIFIED',
  HOST: 'HOST',
  TIUP: 'TIUP',
  CLUSTER: 'CLUSTER',
} as const;

export type TagServiceListTagsByResourceTypeParams = {
/**
 * page size
 */
pageSize?: number;
/**
 * page token
 */
pageToken?: string;
/**
 * skip
 */
skip?: number;
/**
 * the tag key which the tag values belong to
 */
tagKey?: string;
/**
 * the keyword which tag values similar to
 */
keyword?: string;
/**
 * the resource type of the tag has bound with

 - TAG_BIND_RESOURCE_TYPE_UNSPECIFIED: resource type unspecified
 - HOST: resource type host
 - TIUP: resource type tiup
 - CLUSTER: resource type cluster
 */
resourceType?: TagServiceListTagsByResourceTypeResourceType;
};

export type TagServiceDeleteTag200 = { [key: string]: unknown };

export type TagServiceListTagsParams = {
/**
 * page size
 */
pageSize?: number;
/**
 * page token
 */
pageToken?: string;
/**
 * skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
};

export type RoleServiceDeleteRole200 = { [key: string]: unknown };

export type RoleServiceListRolesParams = {
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
/**
 * role_name_like
 */
roleNameLike?: string;
/**
 * The name of the role
 */
roleName?: string;
};

export type MetricsServiceGetOverviewStatusParams = {
/**
 * Task start time in Unix timestamp format
 */
taskStartTime?: string;
/**
 * Task end time in Unix timestamp format
 */
taskEndTime?: string;
};

export type MetricsServiceGetTopMetricDataParams = {
/**
 * Start time for the query
 */
startTime: string;
/**
 * End time for the query
 */
endTime: string;
/**
 * Step time for the query
 */
step?: string;
/**
 * Limit for the number of top results
 */
limit?: string;
};

export type MetricsServiceGetMetricsGroup = typeof MetricsServiceGetMetricsGroup[keyof typeof MetricsServiceGetMetricsGroup];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetricsServiceGetMetricsGroup = {
  unspecified: 'unspecified',
  overview: 'overview',
  basic: 'basic',
  advanced: 'advanced',
  resource: 'resource',
  performance: 'performance',
  process: 'process',
} as const;

export type MetricsServiceGetMetricsClass = typeof MetricsServiceGetMetricsClass[keyof typeof MetricsServiceGetMetricsClass];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetricsServiceGetMetricsClass = {
  unspecified: 'unspecified',
  cluster: 'cluster',
  host: 'host',
  overview: 'overview',
} as const;

export type MetricsServiceGetMetricsParams = {
/**
 * Level 1 classification

 - unspecified: Unspecified
 - cluster: Cluster metrics
 - host: Host metrics
 - overview: Overview metrics
 */
class?: MetricsServiceGetMetricsClass;
/**
 * Level 2 grouping

 - unspecified: Unspecified group
 - overview: Overview group
 - basic: Basic group
 - advanced: Advanced group
 - resource: Resource group
 - performance: Performance group
 - process: Process group
 */
group?: MetricsServiceGetMetricsGroup;
/**
 * Level 3 type
 */
type?: string;
/**
 * The metric name
 */
name?: string;
};

export type UserServiceLogout200 = { [key: string]: unknown };

export type UserServiceLogin200 = { [key: string]: unknown };

export type LocationServiceDeleteLocation200 = { [key: string]: unknown };

export type LocationServiceListLocationsLocationKey = typeof LocationServiceListLocationsLocationKey[keyof typeof LocationServiceListLocationsLocationKey];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocationServiceListLocationsLocationKey = {
  zone: 'zone',
  dc: 'dc',
  rack: 'rack',
} as const;

export type LocationServiceListLocationsParams = {
/**
 * page size
 */
pageSize?: number;
/**
 * page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
/**
 * location key  (e.g., "zone", "dc")
 */
locationKey?: LocationServiceListLocationsLocationKey;
/**
 * the Location value of the Location
 */
locationValue?: string;
/**
 * the Location parent_Id of the Location
 */
parentId?: string;
};

export type LicenseServiceActivateLicenseBody = {
  /** The content of the license file

The license file to upload to activate the license */
  license: Blob;
};

export type HostServiceDownloadListHostsParams = {
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
/**
 * The name of the user
 */
searchValue?: string;
/**
 * location_ids
 */
locationIds?: string[];
/**
 * tag_ids
 */
tagIds?: string[];
};

export type HostServiceBatchDelete200 = { [key: string]: unknown };

export type MetricsServiceGetHostMetricDataParams = {
/**
 * Start time in Unix timestamp format
 */
startTime: string;
/**
 * End time in Unix timestamp format
 */
endTime: string;
/**
 * Step time in seconds
 */
step?: string;
/**
 * Line Label for the metric
 */
label?: string;
/**
 * Time Range for the query
 */
range?: string;
};

export type HostServiceDelete200 = { [key: string]: unknown };

export type HostServiceImportBody = {
  /** The Credential_Id of the Import */
  credentialId: string;
  /** Upload a csv form data to host. */
  hostData: Blob;
};

export type HostServiceListHostsParams = {
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
/**
 * The name of the user
 */
searchValue?: string;
/**
 * location_ids
 */
locationIds?: string[];
/**
 * tag_ids
 */
tagIds?: string[];
};

export type CredentialServiceDeleteCredential200 = { [key: string]: unknown };

export type CredentialServiceListCredentialsCredentialType = typeof CredentialServiceListCredentialsCredentialType[keyof typeof CredentialServiceListCredentialsCredentialType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CredentialServiceListCredentialsCredentialType = {
  CREDENTIAL_TYPE_UNSPECIFIED: 'CREDENTIAL_TYPE_UNSPECIFIED',
  HOST: 'HOST',
  TIDB: 'TIDB',
} as const;

export type CredentialServiceListCredentialsParams = {
/**
 * page size
 */
pageSize?: number;
/**
 * page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
/**
 * the credential type of the credential

 - CREDENTIAL_TYPE_UNSPECIFIED: resource type unspecified
 - HOST: credential type host
 - TIDB: credential type tidb
 */
credentialType?: CredentialServiceListCredentialsCredentialType;
/**
 * the credential id of the credential
 */
credentialId?: string;
};

export type DiagnosisServiceGetTopSqlDetailParams = {
/**
 * Begin time
 */
beginTime: string;
/**
 * End time
 */
endTime: string;
/**
 * Plan digest list
 */
planDigest?: string[];
};

export type DiagnosisServiceGetTopSqlListParams = {
/**
 * Begin time
 */
beginTime: string;
/**
 * End time
 */
endTime: string;
/**
 * Database list
 */
db?: string[];
/**
 * SQL Text, used for fuzzy query
 */
text?: string;
/**
 * Order by field
 */
orderBy?: string;
/**
 * Is descending order
 */
isDesc?: boolean;
/**
 * Fields to select, e.g., "Query,Digest"
 */
fields?: string;
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * Advanced filters, such as "digest = xxx"
 */
advancedFilter?: string[];
/**
 * Is group by time
 */
isGroupByTime?: boolean;
};

export type DiagnosisServiceUnbindSqlPlan200 = { [key: string]: unknown };

export type DiagnosisServiceUnbindSqlPlanParams = {
/**
 * SQL digest
 */
digest: string;
};

export type DiagnosisServiceGetSqlPlanBindingListParams = {
/**
 * Begin time
 */
beginTime: string;
/**
 * End time
 */
endTime: string;
/**
 * SQL digest
 */
digest: string;
};

export type DiagnosisServiceBindSqlPlan200 = { [key: string]: unknown };

export type DiagnosisServiceGetSqlPlanListParams = {
/**
 * Begin time
 */
beginTime: string;
/**
 * End time
 */
endTime: string;
/**
 * SQL digest
 */
digest?: string;
/**
 * Table name
 */
schemaName?: string;
};

export type DiagnosisServiceGetSqlLimitListParams = {
/**
 * Watch text
 */
watchText: string;
};

export type DiagnosisServiceRemoveSqlLimit200 = { [key: string]: unknown };

export type DiagnosisServiceAddSqlLimit200 = { [key: string]: unknown };

export type DiagnosisServiceGetSlowQueryDetailParams = {
/**
 * Timestamp
 */
timestamp: number;
/**
 * Connection ID
 */
connectionId: string;
};

export type DiagnosisServiceDownloadSlowQueryListParams = {
/**
 * Begin time in Unix timestamp
 */
beginTime: string;
/**
 * End time in Unix timestamp
 */
endTime: string;
/**
 * List of databases
 */
db?: string[];
/**
 * Search text
 */
text?: string;
/**
 * Order by field
 */
orderBy?: string;
/**
 * Is descending order
 */
isDesc?: boolean;
/**
 * Fields to select, e.g., "Query,Digest"
 */
fields?: string;
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token for pagination
 */
pageToken?: string;
/**
 * Number of records to skip
 */
skip?: number;
/**
 * Advanced filters, such as "digest = xxx"
 */
advancedFilter?: string[];
};

export type DiagnosisServiceGetSlowQueryListParams = {
/**
 * Begin time in Unix timestamp
 */
beginTime: string;
/**
 * End time in Unix timestamp
 */
endTime: string;
/**
 * List of databases
 */
db?: string[];
/**
 * Search text
 */
text?: string;
/**
 * Order by field
 */
orderBy?: string;
/**
 * Is descending order
 */
isDesc?: boolean;
/**
 * Fields to select, e.g., "Query,Digest"
 */
fields?: string;
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token for pagination
 */
pageToken?: string;
/**
 * Number of records to skip
 */
skip?: number;
/**
 * Advanced filters, such as "digest = xxx"
 */
advancedFilter?: string[];
};

export type ClusterServiceDeleteProcess200 = { [key: string]: unknown };

export type MetricsServiceGetClusterMetricDataParams = {
/**
 * Start time in Unix timestamp format
 */
startTime: string;
/**
 * End time in Unix timestamp format
 */
endTime: string;
/**
 * Step time in seconds
 */
step?: string;
/**
 * Line Label for the metric
 */
label?: string;
/**
 * Time Range for the query
 */
range?: string;
};

export type ClusterBRServiceListClusterBRTasksStatus = typeof ClusterBRServiceListClusterBRTasksStatus[keyof typeof ClusterBRServiceListClusterBRTasksStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClusterBRServiceListClusterBRTasksStatus = {
  running: 'running',
  finished: 'finished',
  abnormal: 'abnormal',
  stopped: 'stopped',
} as const;

export type ClusterBRServiceListClusterBRTasksType = typeof ClusterBRServiceListClusterBRTasksType[keyof typeof ClusterBRServiceListClusterBRTasksType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClusterBRServiceListClusterBRTasksType = {
  full_backup: 'full_backup',
  log_backup: 'log_backup',
  restore_by_file: 'restore_by_file',
  restore_by_time: 'restore_by_time',
  all_backup: 'all_backup',
  all_restore: 'all_restore',
} as const;

export type ClusterBRServiceListClusterBRTasksParams = {
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
/**
 * The br task ID
 */
brTaskId?: string;
/**
 * The cluster name
 */
clusterName?: string;
/**
 * Type of the br task

 - full_backup: Full backup
 - log_backup: Log backup
 - restore_by_file: Restore by file
 - restore_by_time: Restore by time
 - all_backup: All backup
 - all_restore: All restore
 */
type?: ClusterBRServiceListClusterBRTasksType;
/**
 * Status of the br task

 - running: Running
 - finished: Finished
 - abnormal: Abnormal
 - stopped: Stopped
 */
status?: ClusterBRServiceListClusterBRTasksStatus;
};

export type ClusterBRServiceListClusterBackupRecordsParams = {
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
};

export type GlobalBRServiceStopBRTask200 = { [key: string]: unknown };

export type GlobalBRServiceStartBRTask200 = { [key: string]: unknown };

export type GlobalBRServiceDeleteBRTask200 = { [key: string]: unknown };

export type GlobalBRServiceDeleteBRTaskParams = {
/**
 * delete_backup_file for whether delete the backup files or not
 */
deleteBackupFile?: boolean;
};

export type GlobalBRServiceListBRTasksStatus = typeof GlobalBRServiceListBRTasksStatus[keyof typeof GlobalBRServiceListBRTasksStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GlobalBRServiceListBRTasksStatus = {
  all: 'all',
  running: 'running',
  finished: 'finished',
  abnormal: 'abnormal',
  stopped: 'stopped',
} as const;

export type GlobalBRServiceListBRTasksType = typeof GlobalBRServiceListBRTasksType[keyof typeof GlobalBRServiceListBRTasksType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GlobalBRServiceListBRTasksType = {
  all: 'all',
  full_backup: 'full_backup',
  log_backup: 'log_backup',
  restore_by_file: 'restore_by_file',
  restore_by_time: 'restore_by_time',
  all_backup: 'all_backup',
  all_restore: 'all_restore',
} as const;

export type GlobalBRServiceListBRTasksParams = {
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
/**
 * The br task ID
 */
brTaskId?: string;
/**
 * The cluster ID
 */
clusterId?: string;
/**
 * The cluster name
 */
clusterName?: string;
/**
 * Type of the br task

 - all: All
 - full_backup: Full backup
 - log_backup: Log backup
 - restore_by_file: Restore by file
 - restore_by_time: Restore by time
 - all_backup: All backup
 - all_restore: All restore
 */
type?: GlobalBRServiceListBRTasksType;
/**
 * Status of the br task

 - all: All
 - running: Running
 - finished: Finished
 - abnormal: Abnormal
 - stopped: Stopped
 */
status?: GlobalBRServiceListBRTasksStatus;
};

export type GlobalBRServiceGetBRSummaryParams = {
/**
 * Number of top clusters
 */
top?: number;
};

export type GlobalBRServiceDeleteBackupPolicy200 = { [key: string]: unknown };

export type GlobalBRServiceListBackupPoliciesParams = {
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
};

export type ApiKeyServiceDeleteApiKey200 = { [key: string]: unknown };

export type ApiKeyServiceListApiKeysParams = {
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
/**
 * The access_key of the apikey
 */
accessKey?: string;
/**
 * The access_key of the apikey
 */
creator?: string;
/**
 * The status of the apikey
 */
status?: string;
};

export type V2BackupPolicyBody = V2BackupPolicy;

export interface V2ValidateSessionResponse {
  userId: string;
}

export interface V2ValidateConnectionResponse {
  connectionResult?: string;
  inaccessibleHosts?: string[];
}

export interface V2ValidateConnectionRequest {
  credentialId: string;
}

export interface V2UserRole {
  roleId: number;
  roleName?: string;
}

/**
 * UserProfile represents the profile information of the authenticated user.
 */
export interface V2UserProfile {
  /** The email address of the user. */
  email: string;
  /** The  name of the user. */
  name: string;
  /** The note of the user. */
  note?: string;
  /** The phone of the user. */
  phone?: string;
  /** The unique identifier of the user. */
  userId: string;
}

/**
 * User represents a user resource containing detailed information about a user.
 */
export interface V2User {
  /** The timestamp when the user was created. */
  readonly createTime?: string;
  /** The email address of the user. */
  email?: string;
  /** The full name of the user. */
  name: string;
  /** Additional notes about the user. */
  note?: string;
  /** The user's password (optional). */
  password?: string;
  /** The user's phone number. */
  phone?: string;
  /** The roles assigned to the user. */
  roles?: V2UserRole[];
  /** The timestamp when the user was last updated. */
  readonly updateTime?: string;
  /** The unique user ID of the user. */
  userId: string;
  /** The type of the user (e.g., admin, regular user). */
  userType?: number;
  /** A description of the user's type. */
  userTypeDesc?: string;
}

/**
 * - all: All
 - full_backup: Full backup
 - log_backup: Log backup
 - restore_by_file: Restore by file
 - restore_by_time: Restore by time
 - all_backup: All backup
 - all_restore: All restore
 */
export type V2TypeEnumData = typeof V2TypeEnumData[keyof typeof V2TypeEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2TypeEnumData = {
  all: 'all',
  full_backup: 'full_backup',
  log_backup: 'log_backup',
  restore_by_file: 'restore_by_file',
  restore_by_time: 'restore_by_time',
  all_backup: 'all_backup',
  all_restore: 'all_restore',
} as const;

/**
 * - automatic: automatic
 - manual: manual
 */
export type V2TriggerTypeEnumData = typeof V2TriggerTypeEnumData[keyof typeof V2TriggerTypeEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2TriggerTypeEnumData = {
  automatic: 'automatic',
  manual: 'manual',
} as const;

export interface V2TopSqlDetail {
  avg_affected_rows?: number;
  avg_backoff_time?: number;
  avg_commit_backoff_time?: number;
  avg_commit_time?: number;
  avg_compile_latency?: number;
  avg_cop_process_time?: number;
  avg_cop_wait_time?: number;
  avg_disk?: number;
  avg_get_commit_ts_time?: number;
  avg_latency?: number;
  avg_local_latch_wait_time?: number;
  avg_mem?: number;
  avg_parse_latency?: number;
  avg_prewrite_regions?: number;
  avg_prewrite_time?: number;
  avg_process_time?: number;
  avg_processed_keys?: number;
  avg_resolve_lock_time?: number;
  avg_rocksdb_block_cache_hit_count?: number;
  avg_rocksdb_block_read_byte?: number;
  avg_rocksdb_block_read_count?: number;
  avg_rocksdb_delete_skipped_count?: number;
  avg_rocksdb_key_skipped_count?: number;
  avg_ru?: number;
  avg_tidb_cpu_time?: number;
  avg_tikv_cpu_time?: number;
  avg_time_queued_by_rc?: number;
  avg_total_keys?: number;
  avg_txn_retry?: number;
  avg_wait_time?: number;
  avg_write_keys?: number;
  avg_write_size?: number;
  binary_plan?: string;
  binary_plan_text?: string;
  digest?: string;
  digest_text?: string;
  exec_count?: number;
  first_seen?: number;
  index_names?: string;
  last_seen?: number;
  max_backoff_time?: number;
  max_commit_backoff_time?: number;
  max_commit_time?: number;
  max_compile_latency?: number;
  max_cop_process_time?: number;
  max_cop_wait_time?: number;
  max_disk?: number;
  max_get_commit_ts_time?: number;
  max_latency?: number;
  max_local_latch_wait_time?: number;
  max_mem?: number;
  max_parse_latency?: number;
  max_prewrite_regions?: number;
  max_prewrite_time?: number;
  max_process_time?: number;
  max_processed_keys?: number;
  max_resolve_lock_time?: number;
  max_rocksdb_block_cache_hit_count?: number;
  max_rocksdb_block_read_byte?: number;
  max_rocksdb_block_read_count?: number;
  max_rocksdb_delete_skipped_count?: number;
  max_rocksdb_key_skipped_count?: number;
  max_ru?: number;
  max_time_queued_by_rc?: number;
  max_total_keys?: number;
  max_txn_retry?: number;
  max_wait_time?: number;
  max_write_keys?: number;
  max_write_size?: number;
  min_latency?: number;
  plan?: string;
  plan_can_be_bound?: boolean;
  plan_count?: number;
  plan_digest?: string;
  plan_hint?: string;
  prev_sample_text?: string;
  query_sample_text?: string;
  related_schemas?: string;
  resource_group?: string;
  sample_user?: string;
  schema_name?: string;
  stmt_type?: string;
  sum_backoff_times?: number;
  sum_cop_task_num?: number;
  sum_errors?: number;
  sum_latency?: number;
  sum_ru?: number;
  sum_warnings?: number;
  summary_begin_time?: number;
  summary_end_time?: number;
  table_names?: string;
}

export interface V2TopSqlList {
  data?: V2TopSqlDetail[];
  nextPageToken?: string;
  totalSize?: number;
}

export interface V2TopSqlConfigs {
  enable?: boolean;
  historySize?: number;
  internalQuery?: boolean;
  maxSize?: number;
  refreshInterval?: number;
}

export interface V2TopSqlAvailableFields {
  fields?: string[];
}

export interface V2TopSqlAvailableAdvancedFilters {
  filters?: string[];
}

export interface V2TopSqlAvailableAdvancedFilterInfo {
  name?: string;
  type?: string;
  unit?: string;
  valueList?: string[];
}

export interface V2TopMetricData {
  data?: V2ExprQueryData[];
  status?: string;
}

export interface V2TopMetricConfig {
  cacheFlushIntervalInMinutes?: number;
}

export interface V2TiupsServiceUpdateTiupsBody {
  tiups?: Tiupv2UpdateTiups;
}

export interface V2TiupsClusters {
  clusterId?: string;
  clusterName?: string;
  managed?: boolean;
  metaPath?: string;
  privateKeyPath?: string;
  user?: string;
  version?: string;
}

export interface V2TiupsClustersResponse {
  tiupsClusters?: V2TiupsClusters[];
}

export interface V2TiupTags {
  tagId?: string;
  tagKey?: string;
  tagValue: string;
}

export interface V2Tiups {
  credentialId?: string;
  description?: string;
  host?: V2TiupHost;
  hostId?: string;
  name?: string;
  tags?: V2TiupTags[];
  tiupHome?: string;
  tiupId?: string;
  version?: string;
}

export type V2TiupHostHostType = typeof V2TiupHostHostType[keyof typeof V2TiupHostHostType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2TiupHostHostType = {
  VM: 'VM',
  PM: 'PM',
} as const;

export interface V2TiupCredential {
  credentialId?: string;
  credentialName?: string;
  credentialType?: string;
  userName?: string;
}

export interface V2TiupHost {
  createdTime?: string;
  credential?: V2TiupCredential;
  credentialId?: string;
  hostId: string;
  hostName?: string;
  hostType?: V2TiupHostHostType;
  ip?: string;
  locationId?: string;
  osArchitecture?: string;
  osName?: string;
  osRelease?: string;
  osVersion?: string;
  sshPort?: number;
  updatedTime?: string;
}

export interface V2TiDBProcesses {
  cmd?: string;
  pid?: number;
  ppid?: number;
  runningTime?: string;
  startTime?: string;
  uid?: string;
}

export interface V2TiDBCredentialObject {
  clusterId?: string;
  clusterName?: string;
  password: string;
}

export interface V2Tags {
  tagId?: string;
  tagKey?: string;
  tagValue: string;
}

export interface V2TagWithBindObject {
  bindObjects?: V2BindObject[];
  tagInfo?: Tagv2Tag;
}

/**
 * - TAG_BIND_RESOURCE_TYPE_UNSPECIFIED: resource type unspecified
 - HOST: resource type host
 - TIUP: resource type tiup
 - CLUSTER: resource type cluster
 */
export type V2TagBindResourceType = typeof V2TagBindResourceType[keyof typeof V2TagBindResourceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2TagBindResourceType = {
  TAG_BIND_RESOURCE_TYPE_UNSPECIFIED: 'TAG_BIND_RESOURCE_TYPE_UNSPECIFIED',
  HOST: 'HOST',
  TIUP: 'TIUP',
  CLUSTER: 'CLUSTER',
} as const;

/**
 * - all: All
 - running: Running
 - finished: Finished
 - abnormal: Abnormal
 - stopped: Stopped
 */
export type V2StatusEnumData = typeof V2StatusEnumData[keyof typeof V2StatusEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2StatusEnumData = {
  all: 'all',
  running: 'running',
  finished: 'finished',
  abnormal: 'abnormal',
  stopped: 'stopped',
} as const;

export interface V2StatusCount {
  count?: number;
  status?: string;
}

export interface V2SqlPlanList {
  data?: V2TopSqlDetail[];
}

export interface V2SqlPlanBindingList {
  data?: V2SqlPlanBindingDetail[];
}

export type V2SqlPlanBindingDetailStatus = typeof V2SqlPlanBindingDetailStatus[keyof typeof V2SqlPlanBindingDetailStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2SqlPlanBindingDetailStatus = {
  enabled: 'enabled',
  using: 'using',
  disabled: 'disabled',
  deleted: 'deleted',
  invalid: 'invalid',
  rejected: 'rejected',
  pending_verify: 'pending verify',
} as const;

export type V2SqlPlanBindingDetailSource = typeof V2SqlPlanBindingDetailSource[keyof typeof V2SqlPlanBindingDetailSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2SqlPlanBindingDetailSource = {
  manual: 'manual',
  history: 'history',
  capture: 'capture',
  evolve: 'evolve',
} as const;

export interface V2SqlPlanBindingDetail {
  digest?: string;
  planDigest?: string;
  source?: V2SqlPlanBindingDetailSource;
  status?: V2SqlPlanBindingDetailStatus;
}

export type V2SqlLimitAction = typeof V2SqlLimitAction[keyof typeof V2SqlLimitAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2SqlLimitAction = {
  DRYRUN: 'DRYRUN',
  COOLDOWN: 'COOLDOWN',
  KILL: 'KILL',
} as const;

export interface V2SqlLimit {
  action?: V2SqlLimitAction;
  endTime?: string;
  id?: string;
  resourceGroupName?: string;
  source?: string;
  startTime?: string;
  watch?: string;
  watchText?: string;
}

export interface V2SqlLimitList {
  data?: V2SqlLimit[];
}

export interface V2SlowQueryDownloadResponse {
  fileContent?: string;
  filename?: string;
}

export interface V2SlowQueryDetail {
  backoff_detail?: string;
  backoff_time?: number;
  backoff_total?: number;
  backoff_types?: string;
  binary_plan?: string;
  binary_plan_text?: string;
  commit_backoff_time?: number;
  commit_time?: number;
  compile_time?: number;
  connection_id?: string;
  cop_proc_addr?: string;
  cop_proc_avg?: number;
  cop_proc_max?: number;
  cop_proc_p90?: number;
  cop_time?: number;
  cop_wait_addr?: string;
  cop_wait_avg?: number;
  cop_wait_max?: number;
  cop_wait_p90?: number;
  db?: string;
  digest?: string;
  disk_max?: number;
  exec_retry_count?: number;
  exec_retry_time?: number;
  get_commit_ts_time?: number;
  has_more_results?: number;
  host?: string;
  index_names?: string;
  instance?: string;
  is_explicit_txn?: number;
  is_internal?: number;
  kv_total?: number;
  local_latch_wait_time?: number;
  lock_keys_time?: number;
  memory_max?: number;
  optimize_time?: number;
  parse_time?: number;
  pd_total?: number;
  plan?: string;
  plan_digest?: string;
  plan_from_binding?: number;
  plan_from_cache?: number;
  prepared?: number;
  preproc_subqueries?: number;
  preproc_subqueries_time?: number;
  prev_stmt?: string;
  prewrite_region?: number;
  prewrite_time?: number;
  process_keys?: number;
  process_time?: number;
  query?: string;
  query_time?: number;
  request_count?: number;
  request_unit_read?: number;
  request_unit_write?: number;
  resolve_lock_time?: number;
  resource_group?: string;
  result_rows?: number;
  rewrite_time?: number;
  rocksdb_block_cache_hit_count?: number;
  rocksdb_block_read_byte?: number;
  rocksdb_block_read_count?: number;
  rocksdb_delete_skipped_count?: number;
  rocksdb_key_skipped_count?: number;
  ru?: number;
  session_alias?: string;
  stats?: string;
  success?: number;
  tidb_cpu_time?: number;
  tikv_cpu_time?: number;
  time_queued_by_rc?: number;
  timestamp?: number;
  total_keys?: number;
  txn_retry?: number;
  txn_start_ts?: string;
  user?: string;
  wait_prewrite_binlog_time?: number;
  wait_time?: number;
  wait_ts?: number;
  warnings?: string;
  write_keys?: number;
  write_size?: number;
  write_sql_response_total?: number;
}

export interface V2SlowQueryList {
  data?: V2SlowQueryDetail[];
  nextPageToken?: string;
  totalSize?: number;
}

export interface V2SlowQueryAvailableFields {
  fields?: string[];
}

export interface V2SlowQueryAvailableAdvancedFilters {
  filters?: string[];
}

export interface V2SlowQueryAvailableAdvancedFilterInfo {
  name?: string;
  type?: string;
  unit?: string;
  valueList?: string[];
}

export interface V2Role {
  readonly createTime?: string;
  detail?: string;
  id?: number;
  note?: string;
  roleName?: string;
  roleType?: number;
  roleTypeDesc?: string;
  readonly updateTime?: string;
}

export interface V2ResourceObject {
  resourceId?: string;
  resourceName: string;
}

export interface V2ResourceGroup {
  burstable?: string;
  name?: string;
  priority?: string;
  ruPerSec?: string;
}

export interface V2ResourceGroupList {
  resourceGroups?: V2ResourceGroup[];
}

export interface V2ResetSecretKeyResponse {
  accessKey: string;
  secretKey: string;
}

export type V2ReportResponseTaskState = typeof V2ReportResponseTaskState[keyof typeof V2ReportResponseTaskState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2ReportResponseTaskState = {
  init: 'init',
  running: 'running',
  success: 'success',
  fail: 'fail',
} as const;

export interface V2ReportResponse {
  reports?: Hostv2Report[];
  taskId: string;
  taskState?: V2ReportResponseTaskState;
}

export interface V2QueryMetric {
  device?: string;
  fstype?: string;
  instance?: string;
  job?: string;
  kind?: string;
  module?: string;
  mountpoint?: string;
  ping?: string;
  result?: string;
  sqlType?: string;
  txnMode?: string;
  type?: string;
}

export interface V2QueryResult {
  metric?: V2QueryMetric;
  values?: Metricsv2Value[];
}

export interface V2ProcessList {
  activeProcessCount?: string;
  clusterProcessList?: V2ClusterProcess[];
  isSupportKill?: boolean;
  totalProcessCount?: string;
}

export interface V2PreCheckBackupPolicyResponse {
  clusters?: V2Cluster[];
}

export interface V2OverviewStatus {
  alertLevels?: V2StatusCount[];
  alerts?: V2StatusCount[];
  brTasks?: V2StatusCount[];
  clusters?: V2StatusCount[];
  hosts?: V2StatusCount[];
  otherTasks?: V2StatusCount[];
  sysTasks?: V2StatusCount[];
}

export interface V2Metrics {
  metrics?: V2CategoryMetricDetail[];
}

export interface V2MetricWithExpressions {
  description?: string;
  expressions?: V2ExpressionWithLegend[];
  isBuiltin?: boolean;
  maxTidbVersion?: string;
  minTidbVersion?: string;
  name?: string;
  unit?: string;
}

export interface V2LoginRequest {
  password?: string;
  userId: string;
}

export type V2LocationsLocationKey = typeof V2LocationsLocationKey[keyof typeof V2LocationsLocationKey];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2LocationsLocationKey = {
  zone: 'zone',
  dc: 'dc',
  rack: 'rack',
} as const;

export interface V2Locations {
  locationId?: string;
  locationKey?: V2LocationsLocationKey;
  locationValue?: string;
  parentId?: string;
}

export interface V2LocationMappings {
  locationId?: string;
  locationKey: string;
  locationValue: string;
  parentId?: string;
}

/**
 * ListUsersResponse defines the response containing a list of users and pagination information.
 */
export interface V2ListUsersResponse {
  /** Token for the next page of results. */
  nextPageToken?: string;
  /** The total number of users that match the filter criteria. */
  totalSize?: number;
  /** The list of users retrieved. */
  users?: V2User[];
}

export interface V2ListTiupsResponse {
  nextPageToken?: string;
  tiups?: V2Tiups[];
  totalSize?: number;
}

export interface V2ListTagsWithBindingsResponse {
  nextPageToken?: string;
  tags?: V2TagWithBindObject[];
  totalSize?: number;
}

export interface V2ListTagsResponse {
  nextPageToken?: string;
  tags?: Tagv2Tag[];
  totalSize?: number;
}

export interface V2ListTagsByResourceTypeResponse {
  nextPageToken?: string;
  tags?: Tagv2Tag[];
  totalSize?: number;
}

export interface V2ListTagKeysResponse {
  nextPageToken?: string;
  tagKeys?: string[];
  totalSize?: number;
}

export interface V2ListRolesResponse {
  nextPageToken?: string;
  roles?: V2Role[];
  totalSize?: number;
}

export interface V2ListLocationsResponse {
  locations?: V2Locations[];
  nextPageToken?: string;
  totalSize?: number;
}

export interface V2ListHostsResponse {
  hosts: V2Host[];
  nextPageToken: string;
  totalSize: number;
}

export interface V2ListCredentialsResponse {
  credentials?: V2Credential[];
  nextPageToken?: string;
  totalSize?: number;
}

export interface V2ListClusterBackupRecordsResponse {
  backupRecords?: V2ClusterBRTask[];
  nextPageToken?: string;
  totalSize?: number;
}

export interface V2ListClusterBRTasksResponse {
  brTasks?: V2ClusterBRTask[];
  nextPageToken?: string;
  totalSize?: number;
}

export interface V2ListBackupPoliciesResponse {
  backupPolicies?: V2BackupPolicy[];
  nextPageToken?: string;
  totalSize?: number;
}

export interface V2ListBRTasksResponse {
  brTasks?: V2BRTask[];
  nextPageToken?: string;
  totalSize?: number;
}

export interface V2ListApiKeysResponse {
  apikeys?: V2ApiKey[];
  nextPageToken?: string;
  totalSize?: number;
}

/**
 * - free: free
 - ultimate: ultimate
 */
export type V2LicenseTypeEnumData = typeof V2LicenseTypeEnumData[keyof typeof V2LicenseTypeEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2LicenseTypeEnumData = {
  free: 'free',
  ultimate: 'ultimate',
} as const;

/**
 * - active: active
 - expired: inactive
 - expiring: expired
 - invalid: invalid
 - revoked: revoked
 */
export type V2LicenseStatusEnumData = typeof V2LicenseStatusEnumData[keyof typeof V2LicenseStatusEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2LicenseStatusEnumData = {
  active: 'active',
  expired: 'expired',
  expiring: 'expiring',
  invalid: 'invalid',
  revoked: 'revoked',
} as const;

export type V2ImportRequestHeaders = {[key: string]: string};

export interface V2ImportRequest {
  credentialId?: string;
  fileName?: string;
  headers: V2ImportRequestHeaders;
  /** Upload a csv form data to host. */
  hostData: Blob;
}

export interface V2HostTiDBProcessesResponse {
  tiDBProcesses?: V2TiDBProcesses[];
}

export type V2HostTaskStatus = typeof V2HostTaskStatus[keyof typeof V2HostTaskStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2HostTaskStatus = {
  init: 'init',
  existed: 'existed',
  succeeded: 'succeeded',
  failed: 'failed',
} as const;

export interface V2HostTask {
  credential?: V2Credential;
  credentialId?: string;
  hostId: string;
  hostName?: string;
  ip: string;
  locationId?: string;
  locationMappings?: V2LocationMappings[];
  reportId?: string;
  sshPort: number;
  status?: V2HostTaskStatus;
  tags?: string;
  tagsList?: V2Tags[];
  taskId: string;
  userName?: string;
}

export interface V2ImportTaskResponse {
  task: V2HostTask[];
  taskId: string;
}

export interface V2HostServiceUpdateHostBody {
  host?: Hostv2UpdateHost;
}

export interface V2HostFixResponse {
  hostId: string;
  reportId: string;
  taskId: string;
}

export interface V2HostDiskResponse {
  disk?: V2Disk[];
}

export interface V2HostCredentialObject {
  hostIps?: string[];
  password?: string;
  privateKey?: string;
  publicKey?: string;
}

export interface V2HostCreateResponse {
  taskId?: string;
}

export interface V2HostCheckResponse {
  hostId: string;
  reportId: string;
  taskId: string;
}

export type V2HostStatus = typeof V2HostStatus[keyof typeof V2HostStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2HostStatus = {
  initializing: 'initializing',
  deleting: 'deleting',
  deleted: 'deleted',
  used: 'used',
  idle: 'idle',
} as const;

export type V2HostHostType = typeof V2HostHostType[keyof typeof V2HostHostType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2HostHostType = {
  VM: 'VM',
  PM: 'PM',
} as const;

export type V2HostConnectionStatus = typeof V2HostConnectionStatus[keyof typeof V2HostConnectionStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2HostConnectionStatus = {
  online: 'online',
  offline: 'offline',
} as const;

export type V2HostCheckStatus = typeof V2HostCheckStatus[keyof typeof V2HostCheckStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2HostCheckStatus = {
  checking: 'checking',
  failed: 'failed',
  warning: 'warning',
  succeeded: 'succeeded',
} as const;

export interface V2Host {
  checkStatus?: V2HostCheckStatus;
  clusters?: V2AssociatedClusters[];
  comment?: string;
  connectionStatus?: V2HostConnectionStatus;
  cpuArch?: string;
  cpuCache?: number;
  cpuCores?: number;
  cpuGovernor?: string;
  cpuModel?: string;
  cpuNumaNodes?: number;
  cpus?: number;
  cpuSpeed?: number;
  cpuThreads?: number;
  cpuVendor?: string;
  createdTime?: string;
  credential?: V2Credential;
  credentialId?: string;
  diskType?: string;
  hostId: string;
  hostName?: string;
  hostType?: V2HostHostType;
  ip?: string;
  locationId?: string;
  locationMappings?: V2LocationMappings[];
  memorySize?: number;
  memorySpeed?: number;
  memorySwap?: number;
  memoryType?: string;
  memoryUnit?: string;
  nodeExporterPort?: number;
  osArchitecture?: string;
  osName?: string;
  osRelease?: string;
  osVendor?: string;
  osVersion?: string;
  reportId?: string;
  sshPort?: number;
  status?: V2HostStatus;
  storageAvailable?: number;
  storageTotalSize?: number;
  storageUnit?: string;
  storageUsed?: number;
  tags?: V2Tags[];
  tiupIds?: string[];
  updatedTime?: string;
}

/**
 * - unspecified: Unspecified group
 - overview: Overview group
 - basic: Basic group
 - advanced: Advanced group
 - resource: Resource group
 - performance: Performance group
 - process: Process group
 */
export type V2GroupEnumData = typeof V2GroupEnumData[keyof typeof V2GroupEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2GroupEnumData = {
  unspecified: 'unspecified',
  overview: 'overview',
  basic: 'basic',
  advanced: 'advanced',
  resource: 'resource',
  performance: 'performance',
  process: 'process',
} as const;

export interface V2GetTagWithBindingsResponse {
  tag?: V2TagWithBindObject;
}

export interface V2GenerateRSAKeyResponse {
  privateKey?: string;
  publicKey?: string;
}

export interface V2GenerateRSAKeyRequest { [key: string]: unknown }

export interface V2ExpressionWithLegend {
  labels?: string[];
  legend?: string;
  maxTidbVersion?: string;
  minTidbVersion?: string;
  name?: string;
  promMetric?: string;
  promql?: string;
  type?: string;
}

export interface V2ExprQueryData {
  expr?: string;
  legend?: string;
  result?: V2QueryResult[];
}

export interface V2HostMetricData {
  data?: V2ExprQueryData[];
  status?: string;
}

export interface V2ErrorDetail {
  locale?: string;
  message?: string;
  type?: string;
}

export interface V2DownloadRSAKeyResponse {
  data?: string;
}

export interface V2DownloadListHostResponse {
  data?: string;
}

export interface V2DownloadHostTemplateResponse {
  data?: string;
}

export type V2DiskDiskType = typeof V2DiskDiskType[keyof typeof V2DiskDiskType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2DiskDiskType = {
  HDD: 'HDD',
  SSD: 'SSD',
} as const;

export interface V2Disk {
  availableSpace?: number;
  diskType?: V2DiskDiskType;
  mountingDir?: string;
  path?: string;
  totalSize?: number;
  usedSpace?: number;
}

export interface V2DeviceCode {
  deviceCode?: string;
}

export interface V2DetectClusterResponse {
  exist?: boolean;
}

/**
 * - week: 
Week
 - month: 
Month
 */
export type V2CycleEnumData = typeof V2CycleEnumData[keyof typeof V2CycleEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2CycleEnumData = {
  week: 'week',
  month: 'month',
} as const;

/**
 * - CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED: validate type unspecified
 - PASSWORD: validate by password
 - RSAKEY: validate by rsa key
 */
export type V2CredentialValidateType = typeof V2CredentialValidateType[keyof typeof V2CredentialValidateType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2CredentialValidateType = {
  CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED: 'CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED',
  PASSWORD: 'PASSWORD',
  RSAKEY: 'RSAKEY',
} as const;

/**
 * - CREDENTIAL_TYPE_UNSPECIFIED: resource type unspecified
 - HOST: credential type host
 - TIDB: credential type tidb
 */
export type V2CredentialType = typeof V2CredentialType[keyof typeof V2CredentialType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2CredentialType = {
  CREDENTIAL_TYPE_UNSPECIFIED: 'CREDENTIAL_TYPE_UNSPECIFIED',
  HOST: 'HOST',
  TIDB: 'TIDB',
} as const;

export interface V2Credential {
  credentialId?: string;
  credentialName?: string;
  credentialType: V2CredentialType;
  description?: string;
  hostCredential?: V2HostCredentialObject;
  tidbCredential?: V2TiDBCredentialObject;
  userName: string;
  validateType: V2CredentialValidateType;
}

export interface V2CreateHost {
  comment?: string;
  credentialId?: string;
  ips?: string[];
  locationId?: string;
  sshPort?: number;
  tagIds?: string[];
}

export interface V2CreateApiKeyRequest {
  description: string;
}

export interface V2ConfirmResponse {
  taskId: string;
}

export interface V2ClusterWithoutBRPolicy {
  clusterId?: string;
  clusterName?: string;
  lastBackupTime?: string;
  sizeByte?: string;
}

export interface V2ClusterWithBRSize {
  clusterId?: string;
  clusterName?: string;
  totalSize?: string;
  totalSizeByte?: string;
}

export interface V2ClusterWithBRAlert {
  alertCount?: string;
  clusterId?: string;
  clusterName?: string;
}

export type V2ClusterProcessCommand = typeof V2ClusterProcessCommand[keyof typeof V2ClusterProcessCommand];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2ClusterProcessCommand = {
  Sleep: 'Sleep',
  Quit: 'Quit',
  Init_DB: 'Init DB',
  Query: 'Query',
  Field_List: 'Field List',
  Create_DB: 'Create DB',
  Drop_DB: 'Drop DB',
  Refresh: 'Refresh',
  Shutdown: 'Shutdown',
  Statistics: 'Statistics',
  Processlist: 'Processlist',
  Connect: 'Connect',
  Kill: 'Kill',
  Debug: 'Debug',
  Ping: 'Ping',
  Time: 'Time',
  Delayed_Insert: 'Delayed Insert',
  Change_User: 'Change User',
  Binlog_Dump: 'Binlog Dump',
  Table_Dump: 'Table Dump',
  Connect_out: 'Connect out',
  Register_Slave: 'Register Slave',
  Prepare: 'Prepare',
  Execute: 'Execute',
  Long_Data: 'Long Data',
  Close_stmt: 'Close stmt',
  Reset_stmt: 'Reset stmt',
  Set_option: 'Set option',
  Fetch: 'Fetch',
  Daemon: 'Daemon',
  Reset_connect: 'Reset connect',
} as const;

export interface V2ClusterProcess {
  command?: V2ClusterProcessCommand;
  db?: string;
  digest?: string;
  disk?: string;
  host?: string;
  id?: string;
  info?: string;
  instance?: string;
  mem?: string;
  resourceGroup?: string;
  rowsAffected?: string;
  sessionAlias?: string;
  state?: string;
  tidbCpu?: string;
  tikvCpu?: string;
  time?: string;
  txnStart?: string;
  user?: string;
}

export interface V2ClusterMetricInstance {
  instanceList?: string[];
  type?: string;
}

export interface V2ClusterMetricData {
  data?: V2ExprQueryData[];
  status?: string;
}

export interface V2ClusterBackupPolicy {
  accessKeyId?: string;
  clusters?: V2BasicClusterInfo[];
  concurrency?: number;
  cycle: V2BackupCycleEnumData;
  destination: string;
  frequency: string;
  lastBackupTime?: string;
  lastLogBackupTime?: string;
  logBackup: boolean;
  logBackupDelay?: string;
  logFile?: string;
  name: string;
  policyId?: string;
  rateLimit?: number;
  retention: number;
  secretAccessKey?: string;
  size?: string;
  sizeByte?: string;
  time: string;
}

/**
 * - full_backup: Full backup
 - log_backup: Log backup
 - restore_by_file: Restore by file
 - restore_by_time: Restore by time
 - all_backup: All backup
 - all_restore: All restore
 */
export type V2ClusterBRTypeEnumData = typeof V2ClusterBRTypeEnumData[keyof typeof V2ClusterBRTypeEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2ClusterBRTypeEnumData = {
  full_backup: 'full_backup',
  log_backup: 'log_backup',
  restore_by_file: 'restore_by_file',
  restore_by_time: 'restore_by_time',
  all_backup: 'all_backup',
  all_restore: 'all_restore',
} as const;

/**
 * - automatic: automatic
 - manual: manual
 */
export type V2ClusterBRTriggerTypeEnumData = typeof V2ClusterBRTriggerTypeEnumData[keyof typeof V2ClusterBRTriggerTypeEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2ClusterBRTriggerTypeEnumData = {
  automatic: 'automatic',
  manual: 'manual',
} as const;

/**
 * - running: Running
 - finished: Finished
 - abnormal: Abnormal
 - stopped: Stopped
 */
export type V2ClusterBRStatusEnumData = typeof V2ClusterBRStatusEnumData[keyof typeof V2ClusterBRStatusEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2ClusterBRStatusEnumData = {
  running: 'running',
  finished: 'finished',
  abnormal: 'abnormal',
  stopped: 'stopped',
} as const;

export interface V2ClusterBRTask {
  accessKeyId?: string;
  clusterId?: string;
  clusterName?: string;
  concurrency?: number;
  destination?: string;
  endTime?: string;
  errorMessage?: string;
  expireTime?: string;
  log?: string;
  logFile?: string;
  name?: string;
  policyId?: string;
  policyName?: string;
  rateLimit?: number;
  restoredTs?: string;
  secretAccessKey?: string;
  size?: string;
  sizeByte?: string;
  startTime?: string;
  status?: V2ClusterBRStatusEnumData;
  taskId?: string;
  triggerType?: V2ClusterBRTriggerTypeEnumData;
  type?: V2ClusterBRTypeEnumData;
}

export interface V2Cluster {
  id?: string;
  name?: string;
}

/**
 * - unspecified: Unspecified
 - cluster: Cluster metrics
 - host: Host metrics
 - overview: Overview metrics
 */
export type V2ClassEnumData = typeof V2ClassEnumData[keyof typeof V2ClassEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2ClassEnumData = {
  unspecified: 'unspecified',
  cluster: 'cluster',
  host: 'host',
  overview: 'overview',
} as const;

export interface V2CheckSupportResponse {
  isSupport?: boolean;
}

export interface V2ChangePasswordRequest {
  newPassword: string;
  oldPassword?: string;
  userId: string;
}

export interface V2CategoryMetricDetail {
  class?: string;
  description?: string;
  displayName?: string;
  group?: string;
  metric?: V2MetricWithExpressions;
  name?: string;
  order?: number;
  type?: string;
}

export interface V2BindTagResponse {
  tag?: V2TagWithBindObject;
}

export interface V2BindResourceResponse {
  tags?: Tagv2Tag[];
}

export interface V2BindResourceRequest {
  resourceId: string;
  resourceType: V2TagBindResourceType;
  tagIds?: string[];
}

export interface V2BindObject {
  resources: V2ResourceObject[];
  resourceType: V2TagBindResourceType;
}

export interface V2BindTagRequest {
  bindObjects?: V2BindObject[];
  tagId: string;
}

export interface V2BatchDeleteRequest {
  hostId: string[];
}

export interface V2BatchCreateTagsResponse {
  tags?: Tagv2Tag[];
}

export interface V2BatchCreateTagsRequest {
  tags: Tagv2Tag[];
}

export interface V2BasicClusterInfo {
  id?: string;
  name?: string;
}

export interface V2BackupPolicy {
  accessKeyId?: string;
  clusterIds?: string[];
  clusters?: V2Cluster[];
  concurrency?: number;
  cycle: V2CycleEnumData;
  destination: string;
  frequency: string;
  logBackup: boolean;
  logFile?: string;
  name: string;
  policyId?: string;
  rateLimit?: number;
  retention: number;
  secretAccessKey?: string;
  time: string;
}

/**
 * - week: 
Week
 - month: 
Month
 */
export type V2BackupCycleEnumData = typeof V2BackupCycleEnumData[keyof typeof V2BackupCycleEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2BackupCycleEnumData = {
  week: 'week',
  month: 'month',
} as const;

export interface V2BRTask {
  accessKeyId?: string;
  clusterId?: string;
  clusterName?: string;
  concurrency?: number;
  destination?: string;
  endTime?: string;
  errorMessage?: string;
  expireTime?: string;
  log?: string;
  logFile?: string;
  name?: string;
  policyId?: string;
  policyName?: string;
  rateLimit?: number;
  restoredTs?: string;
  secretAccessKey?: string;
  size?: string;
  sizeByte?: string;
  startTime?: string;
  status?: V2StatusEnumData;
  taskId?: string;
  triggerType?: V2TriggerTypeEnumData;
  type?: V2TypeEnumData;
}

export interface V2BRSummary {
  topClustersWithBrAlert?: V2ClusterWithBRAlert[];
  topClustersWithBrSize?: V2ClusterWithBRSize[];
  topClustersWithoutBrPolicy?: V2ClusterWithoutBRPolicy[];
}

export interface V2AssociatedClusters {
  clusterId?: string;
  clusterName?: string;
}

export type V2ApiKeyStatus = typeof V2ApiKeyStatus[keyof typeof V2ApiKeyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2ApiKeyStatus = {
  disable: 'disable',
  enable: 'enable',
} as const;

export interface V2ApiKey {
  accessKey: string;
  readonly createTime?: string;
  creator?: string;
  description?: string;
  secretKey?: string;
  status?: V2ApiKeyStatus;
  readonly updateTime?: string;
}

export type V2ActivateLicenseRequestHeaders = {[key: string]: string};

export interface V2ActivateLicenseRequest {
  /** The license file to upload to activate the license */
  content: Blob;
  fileName: string;
  headers: V2ActivateLicenseRequestHeaders;
}

export interface Tiupv2UpdateTiups {
  description?: string;
  name?: string;
  tagIds?: string[];
}

export interface Tiupv2CreateTiups {
  description?: string;
  hostId?: string;
  name?: string;
  tagIds?: string[];
  tiupHome?: string;
}

export interface Tagv2Tag {
  tagId?: string;
  tagKey?: string;
  tagValue: string;
}

export type RpcStatusError = {
  code?: number;
  details?: V2ErrorDetail[];
  message?: string;
  status?: string;
};

export interface RpcStatus {
  error?: RpcStatusError;
}

/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a
URL that describes the type of the serialized message.

Protobuf library provides support to pack/unpack Any values in the form
of utility functions or additional generated methods of the Any type.

Example 1: Pack and unpack a message in C++.

    Foo foo = ...;
    Any any;
    any.PackFrom(foo);
    ...
    if (any.UnpackTo(&foo)) {
      ...
    }

Example 2: Pack and unpack a message in Java.

    Foo foo = ...;
    Any any = Any.pack(foo);
    ...
    if (any.is(Foo.class)) {
      foo = any.unpack(Foo.class);
    }
    // or ...
    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
      foo = any.unpack(Foo.getDefaultInstance());
    }

 Example 3: Pack and unpack a message in Python.

    foo = Foo(...)
    any = Any()
    any.Pack(foo)
    ...
    if any.Is(Foo.DESCRIPTOR):
      any.Unpack(foo)
      ...

 Example 4: Pack and unpack a message in Go

     foo := &pb.Foo{...}
     any, err := anypb.New(foo)
     if err != nil {
       ...
     }
     ...
     foo := &pb.Foo{}
     if err := any.UnmarshalTo(foo); err != nil {
       ...
     }

The pack methods provided by protobuf library will by default use
'type.googleapis.com/full.type.name' as the type URL and the unpack
methods only use the fully qualified type name after the last '/'
in the type URL, for example "foo.bar.com/x/y.z" will yield type
name "y.z".

JSON
====
The JSON representation of an `Any` value uses the regular
representation of the deserialized, embedded message, with an
additional field `@type` which contains the type URL. Example:

    package google.profile;
    message Person {
      string first_name = 1;
      string last_name = 2;
    }

    {
      "@type": "type.googleapis.com/google.profile.Person",
      "firstName": <string>,
      "lastName": <string>
    }

If the embedded message type is well-known and has a custom JSON
representation, that representation will be embedded adding a field
`value` which holds the custom JSON in addition to the `@type`
field. Example (for message [google.protobuf.Duration][]):

    {
      "@type": "type.googleapis.com/google.protobuf.Duration",
      "value": "1.212s"
    }
 */
export interface ProtobufAny {
  /** A URL/resource name that uniquely identifies the type of the serialized
protocol buffer message. This string must contain at least
one "/" character. The last segment of the URL's path must represent
the fully qualified name of the type (as in
`path/google.protobuf.Duration`). The name should be in a canonical form
(e.g., leading "." is not accepted).

In practice, teams usually precompile into the binary all types that they
expect it to use in the context of Any. However, for URLs which use the
scheme `http`, `https`, or no scheme, one can optionally set up a type
server that maps type URLs to message definitions as follows:

* If no scheme is provided, `https` is assumed.
* An HTTP GET on the URL must yield a [google.protobuf.Type][]
  value in binary format, or produce an error.
* Applications are allowed to cache lookup results based on the
  URL, or have them precompiled into a binary to avoid any
  lookup. Therefore, binary compatibility needs to be preserved
  on changes to types. (Use versioned type names to manage
  breaking changes.)

Note: this functionality is not currently available in the official
protobuf release, and it is not used for type URLs beginning with
type.googleapis.com. As of May 2023, there are no widely used type server
implementations and no plans to implement one.

Schemes other than `http`, `https` (or the empty scheme) might be
used with implementation specific semantics. */
  '@type'?: string;
  [key: string]: unknown;
}

export interface Metricsv2Value {
  timestamp?: number;
  value?: string;
}

export interface Licensev2License {
  activateAt?: string;
  alerts?: string;
  allow?: string[];
  customerCode?: string;
  deny?: string[];
  deviceCode?: string;
  expirationAt?: string;
  hosts?: string;
  licenseId?: string;
  licenseType?: V2LicenseTypeEnumData;
  signature?: string;
  status?: V2LicenseStatusEnumData;
  vcpu?: string;
  version?: string;
}

export interface Hostv2UpdateHost {
  comment?: string;
  credentialId?: string;
  hostId?: string;
  locationId?: string;
  sshPort?: number;
  tagIds?: string[];
}

export type Hostv2ReportCheckResult = typeof Hostv2ReportCheckResult[keyof typeof Hostv2ReportCheckResult];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Hostv2ReportCheckResult = {
  passed: 'passed',
  failed: 'failed',
  warned: 'warned',
} as const;

export interface Hostv2Report {
  checkBody?: string;
  checkDesc?: string;
  checkId?: string;
  checkName?: string;
  checkOut?: string;
  checkResult?: Hostv2ReportCheckResult;
  fixable?: boolean;
  hostId?: string;
  optional?: boolean;
  reportId: string;
}

export interface UserServiceUpdateUserBody {
  /** The email address of the user. */
  email?: string;
  /** Additional notes about the user. */
  note?: string;
  /** The user's phone number. */
  phone?: string;
  /** The roles assigned to the user. */
  roles?: V2UserRole[];
  /** The type of the user (e.g., admin, regular user). */
  userType?: number;
}

export interface UserServiceResetPasswordBody {
  newPassword: string;
}

export interface TagServiceUpdateTagBody {
  tagKey?: string;
  tagValue: string;
}

export interface RoleServiceUpdateRoleBody {
  detail?: string;
  note?: string;
  roleName: string;
  roleType?: number;
}

export interface LocationServiceUpdateLocationsBody {
  location?: V2Locations;
}

export interface HostServiceHostConfirmBody { [key: string]: unknown }

export interface GlobalBRServiceUpdateBackupPolicyBody {
  accessKeyId?: string;
  clusterIds?: string[];
  clusters?: V2Cluster[];
  concurrency?: number;
  cycle: V2CycleEnumData;
  destination: string;
  frequency: string;
  logBackup: boolean;
  logFile?: string;
  name: string;
  rateLimit?: number;
  retention: number;
  secretAccessKey?: string;
  time: string;
}

export interface DiagnosisServiceUpdateTopSqlConfigsBody {
  enable: boolean;
  historySize?: number;
  internalQuery?: boolean;
  maxSize?: number;
  refreshInterval?: number;
}

export interface DiagnosisServiceRemoveSqlLimitBody {
  id: string;
  watchText: string;
}

export type DiagnosisServiceAddSqlLimitBodyAction = typeof DiagnosisServiceAddSqlLimitBodyAction[keyof typeof DiagnosisServiceAddSqlLimitBodyAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiagnosisServiceAddSqlLimitBodyAction = {
  DRYRUN: 'DRYRUN',
  COOLDOWN: 'COOLDOWN',
  KILL: 'KILL',
} as const;

export interface DiagnosisServiceAddSqlLimitBody {
  action: DiagnosisServiceAddSqlLimitBodyAction;
  resourceGroup: string;
  watchText: string;
}

export interface CredentialServiceUpdateCredentialBody {
  credentialName?: string;
  credentialType: V2CredentialType;
  description?: string;
  forceUpdate?: boolean;
  hostCredential?: V2HostCredentialObject;
  tidbCredential?: V2TiDBCredentialObject;
  userName: string;
  validateType: V2CredentialValidateType;
}

export interface ClusterBRServiceCreateRestoreTaskBody {
  accessKeyId?: string;
  backupTaskId?: string;
  concurrency?: number;
  destination?: string;
  logFile?: string;
  rateLimit?: number;
  restoreTime?: string;
  secretAccessKey?: string;
  targetClusterId: string;
  type?: V2ClusterBRTypeEnumData;
}

export interface ClusterBRServiceCreateBackupTaskBody {
  accessKeyId?: string;
  concurrency?: number;
  destination: string;
  logFile?: string;
  name?: string;
  rateLimit?: number;
  retention?: number;
  secretAccessKey?: string;
}

export type ApiKeyServiceUpdateApiKeyBodyStatus = typeof ApiKeyServiceUpdateApiKeyBodyStatus[keyof typeof ApiKeyServiceUpdateApiKeyBodyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApiKeyServiceUpdateApiKeyBodyStatus = {
  disable: 'disable',
  enable: 'enable',
} as const;

export interface ApiKeyServiceUpdateApiKeyBody {
  creator?: string;
  description?: string;
  secretKey?: string;
  status?: ApiKeyServiceUpdateApiKeyBodyStatus;
}

