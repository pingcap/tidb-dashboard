/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Azores Open API
 * OpenAPI spec version: 2.0.0
 */
import { z as zod } from 'zod';

export const apiKeyServiceListApiKeysQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "accessKey": zod.string().optional(),
  "creator": zod.string().optional(),
  "status": zod.string().optional()
})

export const apiKeyServiceListApiKeysResponse = zod.object({
  "apikeys": zod.array(zod.object({
  "accessKey": zod.string(),
  "secretKey": zod.string().optional(),
  "creator": zod.string().optional(),
  "status": zod.enum(['disable', 'enable']).optional(),
  "description": zod.string().optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const apiKeyServiceCreateApiKeyBody = zod.object({
  "description": zod.string()
})

export const apiKeyServiceCreateApiKeyResponse = zod.object({
  "accessKey": zod.string(),
  "secretKey": zod.string().optional(),
  "creator": zod.string().optional(),
  "status": zod.enum(['disable', 'enable']).optional(),
  "description": zod.string().optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const apiKeyServiceGetApiKeyParams = zod.object({
  "accessKey": zod.string()
})

export const apiKeyServiceGetApiKeyResponse = zod.object({
  "accessKey": zod.string(),
  "secretKey": zod.string().optional(),
  "creator": zod.string().optional(),
  "status": zod.enum(['disable', 'enable']).optional(),
  "description": zod.string().optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const apiKeyServiceDeleteApiKeyParams = zod.object({
  "accessKey": zod.string()
})

export const apiKeyServiceDeleteApiKeyResponse = zod.object({

})


export const apiKeyServiceUpdateApiKeyParams = zod.object({
  "accessKey": zod.string()
})

export const apiKeyServiceUpdateApiKeyBody = zod.object({
  "secretKey": zod.string().optional(),
  "creator": zod.string().optional(),
  "status": zod.enum(['disable', 'enable']).optional(),
  "description": zod.string().optional()
})

export const apiKeyServiceUpdateApiKeyResponse = zod.object({
  "accessKey": zod.string(),
  "secretKey": zod.string().optional(),
  "creator": zod.string().optional(),
  "status": zod.enum(['disable', 'enable']).optional(),
  "description": zod.string().optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const apiKeyServiceResetSecretKeyParams = zod.object({
  "accessKey": zod.string()
})

export const apiKeyServiceResetSecretKeyResponse = zod.object({
  "accessKey": zod.string(),
  "secretKey": zod.string()
})


export const globalBRServiceListBackupPoliciesQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional()
})

export const globalBRServiceListBackupPoliciesResponse = zod.object({
  "backupPolicies": zod.array(zod.object({
  "policyId": zod.string().optional(),
  "name": zod.string(),
  "logBackup": zod.boolean(),
  "destination": zod.string(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "cycle": zod.enum(['week', 'month']).optional(),
  "frequency": zod.string(),
  "time": zod.string(),
  "retention": zod.number(),
  "clusters": zod.array(zod.object({
  "id": zod.string().optional(),
  "name": zod.string().optional()
})).optional(),
  "clusterIds": zod.array(zod.string()).optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const globalBRServiceCreateBackupPolicyBody = zod.object({
  "policyId": zod.string().optional(),
  "name": zod.string(),
  "logBackup": zod.boolean(),
  "destination": zod.string(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "cycle": zod.enum(['week', 'month']).optional(),
  "frequency": zod.string(),
  "time": zod.string(),
  "retention": zod.number(),
  "clusters": zod.array(zod.object({
  "id": zod.string().optional(),
  "name": zod.string().optional()
})).optional(),
  "clusterIds": zod.array(zod.string()).optional()
})

export const globalBRServiceCreateBackupPolicyResponse = zod.object({
  "policyId": zod.string().optional(),
  "name": zod.string(),
  "logBackup": zod.boolean(),
  "destination": zod.string(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "cycle": zod.enum(['week', 'month']).optional(),
  "frequency": zod.string(),
  "time": zod.string(),
  "retention": zod.number(),
  "clusters": zod.array(zod.object({
  "id": zod.string().optional(),
  "name": zod.string().optional()
})).optional(),
  "clusterIds": zod.array(zod.string()).optional()
})


export const globalBRServicePreCheckBackupPolicyBody = zod.object({
  "policyId": zod.string().optional(),
  "name": zod.string(),
  "logBackup": zod.boolean(),
  "destination": zod.string(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "cycle": zod.enum(['week', 'month']).optional(),
  "frequency": zod.string(),
  "time": zod.string(),
  "retention": zod.number(),
  "clusters": zod.array(zod.object({
  "id": zod.string().optional(),
  "name": zod.string().optional()
})).optional(),
  "clusterIds": zod.array(zod.string()).optional()
})

export const globalBRServicePreCheckBackupPolicyResponse = zod.object({
  "clusters": zod.array(zod.object({
  "id": zod.string().optional(),
  "name": zod.string().optional()
})).optional()
})


export const globalBRServiceGetBackupPolicyParams = zod.object({
  "policyId": zod.string()
})

export const globalBRServiceGetBackupPolicyResponse = zod.object({
  "policyId": zod.string().optional(),
  "name": zod.string(),
  "logBackup": zod.boolean(),
  "destination": zod.string(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "cycle": zod.enum(['week', 'month']).optional(),
  "frequency": zod.string(),
  "time": zod.string(),
  "retention": zod.number(),
  "clusters": zod.array(zod.object({
  "id": zod.string().optional(),
  "name": zod.string().optional()
})).optional(),
  "clusterIds": zod.array(zod.string()).optional()
})


export const globalBRServiceDeleteBackupPolicyParams = zod.object({
  "policyId": zod.string()
})

export const globalBRServiceDeleteBackupPolicyResponse = zod.object({

})


export const globalBRServiceUpdateBackupPolicyParams = zod.object({
  "policyId": zod.string()
})

export const globalBRServiceUpdateBackupPolicyBody = zod.object({
  "name": zod.string(),
  "logBackup": zod.boolean(),
  "destination": zod.string(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "cycle": zod.enum(['week', 'month']).optional(),
  "frequency": zod.string(),
  "time": zod.string(),
  "retention": zod.number(),
  "clusters": zod.array(zod.object({
  "id": zod.string().optional(),
  "name": zod.string().optional()
})).optional(),
  "clusterIds": zod.array(zod.string()).optional()
})

export const globalBRServiceUpdateBackupPolicyResponse = zod.object({
  "policyId": zod.string().optional(),
  "name": zod.string(),
  "logBackup": zod.boolean(),
  "destination": zod.string(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "cycle": zod.enum(['week', 'month']).optional(),
  "frequency": zod.string(),
  "time": zod.string(),
  "retention": zod.number(),
  "clusters": zod.array(zod.object({
  "id": zod.string().optional(),
  "name": zod.string().optional()
})).optional(),
  "clusterIds": zod.array(zod.string()).optional()
})


export const globalBRServiceGetBRSummaryQueryParams = zod.object({
  "top": zod.number().optional()
})

export const globalBRServiceGetBRSummaryResponse = zod.object({
  "topClustersWithBrSize": zod.array(zod.object({
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional(),
  "totalSizeByte": zod.string().optional(),
  "totalSize": zod.string().optional()
})).optional(),
  "topClustersWithBrAlert": zod.array(zod.object({
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional(),
  "alertCount": zod.string().optional()
})).optional(),
  "topClustersWithoutBrPolicy": zod.array(zod.object({
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional(),
  "lastBackupTime": zod.string().optional(),
  "sizeByte": zod.string().optional()
})).optional()
})


export const globalBRServiceListBRTasksQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "brTaskId": zod.string().optional(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional(),
  "type": zod.enum(['all', 'full_backup', 'log_backup', 'restore_by_file', 'restore_by_time', 'all_backup', 'all_restore']).optional(),
  "status": zod.enum(['all', 'running', 'finished', 'abnormal', 'stopped']).optional()
})

export const globalBRServiceListBRTasksResponse = zod.object({
  "brTasks": zod.array(zod.object({
  "taskId": zod.string().optional(),
  "type": zod.enum(['all', 'full_backup', 'log_backup', 'restore_by_file', 'restore_by_time', 'all_backup', 'all_restore']).optional(),
  "triggerType": zod.enum(['automatic', 'manual']).optional(),
  "name": zod.string().optional(),
  "status": zod.enum(['all', 'running', 'finished', 'abnormal', 'stopped']).optional(),
  "restoredTs": zod.string().optional(),
  "startTime": zod.string().optional(),
  "endTime": zod.string().optional(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional(),
  "destination": zod.string().optional(),
  "size": zod.string().optional(),
  "sizeByte": zod.string().optional(),
  "errorMessage": zod.string().optional(),
  "policyId": zod.string().optional(),
  "policyName": zod.string().optional(),
  "log": zod.string().optional(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "expireTime": zod.string().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const globalBRServiceDeleteBRTaskParams = zod.object({
  "taskId": zod.string()
})

export const globalBRServiceDeleteBRTaskQueryParams = zod.object({
  "deleteBackupFile": zod.boolean().optional()
})

export const globalBRServiceDeleteBRTaskResponse = zod.object({

})


export const globalBRServiceStartBRTaskParams = zod.object({
  "taskId": zod.string()
})

export const globalBRServiceStartBRTaskResponse = zod.object({

})


export const globalBRServiceStopBRTaskParams = zod.object({
  "taskId": zod.string()
})

export const globalBRServiceStopBRTaskResponse = zod.object({

})


export const clusterBRServiceCreateBackupTaskParams = zod.object({
  "clusterId": zod.string()
})

export const clusterBRServiceCreateBackupTaskBody = zod.object({
  "name": zod.string().optional(),
  "destination": zod.string(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "retention": zod.number().optional()
})

export const clusterBRServiceCreateBackupTaskResponse = zod.object({
  "taskId": zod.string().optional(),
  "type": zod.enum(['full_backup', 'log_backup', 'restore_by_file', 'restore_by_time', 'all_backup', 'all_restore']).optional(),
  "triggerType": zod.enum(['automatic', 'manual']).optional(),
  "name": zod.string().optional(),
  "status": zod.enum(['running', 'finished', 'abnormal', 'stopped']).optional(),
  "restoredTs": zod.string().optional(),
  "startTime": zod.string().optional(),
  "endTime": zod.string().optional(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional(),
  "destination": zod.string().optional(),
  "size": zod.string().optional(),
  "sizeByte": zod.string().optional(),
  "errorMessage": zod.string().optional(),
  "policyId": zod.string().optional(),
  "policyName": zod.string().optional(),
  "log": zod.string().optional(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "expireTime": zod.string().optional()
})


export const clusterBRServiceGetClusterBackupPolicyParams = zod.object({
  "clusterId": zod.string()
})

export const clusterBRServiceGetClusterBackupPolicyResponse = zod.object({
  "policyId": zod.string().optional(),
  "name": zod.string(),
  "logBackup": zod.boolean(),
  "destination": zod.string(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "cycle": zod.enum(['week', 'month']).optional(),
  "frequency": zod.string(),
  "time": zod.string(),
  "retention": zod.number(),
  "clusters": zod.array(zod.object({
  "id": zod.string().optional(),
  "name": zod.string().optional()
})).optional(),
  "lastBackupTime": zod.string().optional(),
  "size": zod.string().optional(),
  "sizeByte": zod.string().optional(),
  "lastLogBackupTime": zod.string().optional(),
  "logBackupDelay": zod.string().optional()
})


export const clusterBRServiceListClusterBackupRecordsParams = zod.object({
  "clusterId": zod.string()
})

export const clusterBRServiceListClusterBackupRecordsQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional()
})

export const clusterBRServiceListClusterBackupRecordsResponse = zod.object({
  "backupRecords": zod.array(zod.object({
  "taskId": zod.string().optional(),
  "type": zod.enum(['full_backup', 'log_backup', 'restore_by_file', 'restore_by_time', 'all_backup', 'all_restore']).optional(),
  "triggerType": zod.enum(['automatic', 'manual']).optional(),
  "name": zod.string().optional(),
  "status": zod.enum(['running', 'finished', 'abnormal', 'stopped']).optional(),
  "restoredTs": zod.string().optional(),
  "startTime": zod.string().optional(),
  "endTime": zod.string().optional(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional(),
  "destination": zod.string().optional(),
  "size": zod.string().optional(),
  "sizeByte": zod.string().optional(),
  "errorMessage": zod.string().optional(),
  "policyId": zod.string().optional(),
  "policyName": zod.string().optional(),
  "log": zod.string().optional(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "expireTime": zod.string().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const clusterBRServiceCreateRestoreTaskParams = zod.object({
  "clusterId": zod.string()
})

export const clusterBRServiceCreateRestoreTaskBody = zod.object({
  "targetClusterId": zod.string(),
  "type": zod.enum(['full_backup', 'log_backup', 'restore_by_file', 'restore_by_time', 'all_backup', 'all_restore']).optional(),
  "backupTaskId": zod.string().optional(),
  "restoreTime": zod.string().optional(),
  "destination": zod.string().optional(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional()
})

export const clusterBRServiceCreateRestoreTaskResponse = zod.object({
  "taskId": zod.string().optional(),
  "type": zod.enum(['full_backup', 'log_backup', 'restore_by_file', 'restore_by_time', 'all_backup', 'all_restore']).optional(),
  "triggerType": zod.enum(['automatic', 'manual']).optional(),
  "name": zod.string().optional(),
  "status": zod.enum(['running', 'finished', 'abnormal', 'stopped']).optional(),
  "restoredTs": zod.string().optional(),
  "startTime": zod.string().optional(),
  "endTime": zod.string().optional(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional(),
  "destination": zod.string().optional(),
  "size": zod.string().optional(),
  "sizeByte": zod.string().optional(),
  "errorMessage": zod.string().optional(),
  "policyId": zod.string().optional(),
  "policyName": zod.string().optional(),
  "log": zod.string().optional(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "expireTime": zod.string().optional()
})


export const clusterBRServiceListClusterBRTasksParams = zod.object({
  "clusterId": zod.string()
})

export const clusterBRServiceListClusterBRTasksQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "brTaskId": zod.string().optional(),
  "clusterName": zod.string().optional(),
  "type": zod.enum(['full_backup', 'log_backup', 'restore_by_file', 'restore_by_time', 'all_backup', 'all_restore']).optional(),
  "status": zod.enum(['running', 'finished', 'abnormal', 'stopped']).optional()
})

export const clusterBRServiceListClusterBRTasksResponse = zod.object({
  "brTasks": zod.array(zod.object({
  "taskId": zod.string().optional(),
  "type": zod.enum(['full_backup', 'log_backup', 'restore_by_file', 'restore_by_time', 'all_backup', 'all_restore']).optional(),
  "triggerType": zod.enum(['automatic', 'manual']).optional(),
  "name": zod.string().optional(),
  "status": zod.enum(['running', 'finished', 'abnormal', 'stopped']).optional(),
  "restoredTs": zod.string().optional(),
  "startTime": zod.string().optional(),
  "endTime": zod.string().optional(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional(),
  "destination": zod.string().optional(),
  "size": zod.string().optional(),
  "sizeByte": zod.string().optional(),
  "errorMessage": zod.string().optional(),
  "policyId": zod.string().optional(),
  "policyName": zod.string().optional(),
  "log": zod.string().optional(),
  "accessKeyId": zod.string().optional(),
  "secretAccessKey": zod.string().optional(),
  "rateLimit": zod.number().optional(),
  "concurrency": zod.number().optional(),
  "logFile": zod.string().optional(),
  "expireTime": zod.string().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const clusterBRServiceDetectClusterParams = zod.object({
  "clusterId": zod.string()
})

export const clusterBRServiceDetectClusterResponse = zod.object({
  "exist": zod.boolean().optional()
})


export const metricsServiceGetClusterMetricDataParams = zod.object({
  "clusterId": zod.string(),
  "name": zod.string()
})

export const metricsServiceGetClusterMetricDataQueryParams = zod.object({
  "startTime": zod.string(),
  "endTime": zod.string(),
  "step": zod.string().optional(),
  "label": zod.string().optional(),
  "range": zod.string().optional()
})

export const metricsServiceGetClusterMetricDataResponse = zod.object({
  "status": zod.string().optional(),
  "data": zod.array(zod.object({
  "expr": zod.string().optional(),
  "legend": zod.string().optional(),
  "result": zod.array(zod.object({
  "metric": zod.object({
  "instance": zod.string().optional(),
  "sqlType": zod.string().optional(),
  "type": zod.string().optional(),
  "result": zod.string().optional(),
  "txnMode": zod.string().optional(),
  "job": zod.string().optional(),
  "device": zod.string().optional(),
  "fstype": zod.string().optional(),
  "mountpoint": zod.string().optional(),
  "module": zod.string().optional(),
  "kind": zod.string().optional(),
  "ping": zod.string().optional()
}).optional(),
  "values": zod.array(zod.object({
  "timestamp": zod.number().optional(),
  "value": zod.string().optional()
})).optional()
})).optional()
})).optional()
})


export const metricsServiceGetClusterMetricInstanceParams = zod.object({
  "clusterId": zod.string(),
  "name": zod.string()
})

export const metricsServiceGetClusterMetricInstanceResponse = zod.object({
  "type": zod.string().optional(),
  "instanceList": zod.array(zod.string()).optional()
})


export const diagnosisServiceGetResourceGroupListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetResourceGroupListResponse = zod.object({
  "resourceGroups": zod.array(zod.object({
  "name": zod.string().optional(),
  "ruPerSec": zod.string().optional(),
  "priority": zod.string().optional(),
  "burstable": zod.string().optional()
})).optional()
})


export const clusterServiceGetProcessListParams = zod.object({
  "clusterId": zod.string()
})

export const clusterServiceGetProcessListResponse = zod.object({
  "clusterProcessList": zod.array(zod.object({
  "instance": zod.string().optional(),
  "id": zod.string().optional(),
  "user": zod.string().optional(),
  "host": zod.string().optional(),
  "db": zod.string().optional(),
  "command": zod.enum(['Sleep', 'Quit', 'Init DB', 'Query', 'Field List', 'Create DB', 'Drop DB', 'Refresh', 'Shutdown', 'Statistics', 'Processlist', 'Connect', 'Kill', 'Debug', 'Ping', 'Time', 'Delayed Insert', 'Change User', 'Binlog Dump', 'Table Dump', 'Connect out', 'Register Slave', 'Prepare', 'Execute', 'Long Data', 'Close stmt', 'Reset stmt', 'Set option', 'Fetch', 'Daemon', 'Reset connect']).optional(),
  "time": zod.string().optional(),
  "state": zod.string().optional(),
  "info": zod.string().optional(),
  "digest": zod.string().optional(),
  "mem": zod.string().optional(),
  "disk": zod.string().optional(),
  "txnStart": zod.string().optional(),
  "resourceGroup": zod.string().optional(),
  "sessionAlias": zod.string().optional(),
  "rowsAffected": zod.string().optional(),
  "tidbCpu": zod.string().optional(),
  "tikvCpu": zod.string().optional()
})).optional(),
  "isSupportKill": zod.boolean().optional(),
  "totalProcessCount": zod.string().optional(),
  "activeProcessCount": zod.string().optional()
})


export const clusterServiceDeleteProcessParams = zod.object({
  "clusterId": zod.string(),
  "sessionId": zod.string()
})

export const clusterServiceDeleteProcessResponse = zod.object({

})


export const diagnosisServiceGetSlowQueryListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetSlowQueryListQueryParams = zod.object({
  "beginTime": zod.string(),
  "endTime": zod.string(),
  "db": zod.array(zod.string()).optional(),
  "text": zod.string().optional(),
  "orderBy": zod.string().optional(),
  "isDesc": zod.boolean().optional(),
  "fields": zod.string().optional(),
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "advancedFilter": zod.array(zod.string()).optional()
})

export const diagnosisServiceGetSlowQueryListResponse = zod.object({
  "data": zod.array(zod.object({
  "digest": zod.string().optional(),
  "query": zod.string().optional(),
  "instance": zod.string().optional(),
  "db": zod.string().optional(),
  "connection_id": zod.string().optional(),
  "success": zod.number().optional(),
  "timestamp": zod.number().optional(),
  "query_time": zod.number().optional(),
  "parse_time": zod.number().optional(),
  "compile_time": zod.number().optional(),
  "rewrite_time": zod.number().optional(),
  "preproc_subqueries_time": zod.number().optional(),
  "optimize_time": zod.number().optional(),
  "wait_ts": zod.number().optional(),
  "cop_time": zod.number().optional(),
  "lock_keys_time": zod.number().optional(),
  "write_sql_response_total": zod.number().optional(),
  "exec_retry_time": zod.number().optional(),
  "memory_max": zod.number().optional(),
  "disk_max": zod.number().optional(),
  "txn_start_ts": zod.string().optional(),
  "prev_stmt": zod.string().optional(),
  "plan": zod.string().optional(),
  "binary_plan": zod.string().optional(),
  "warnings": zod.string().optional(),
  "is_internal": zod.number().optional(),
  "index_names": zod.string().optional(),
  "stats": zod.string().optional(),
  "backoff_types": zod.string().optional(),
  "prepared": zod.number().optional(),
  "plan_from_cache": zod.number().optional(),
  "plan_from_binding": zod.number().optional(),
  "user": zod.string().optional(),
  "host": zod.string().optional(),
  "process_time": zod.number().optional(),
  "wait_time": zod.number().optional(),
  "backoff_time": zod.number().optional(),
  "get_commit_ts_time": zod.number().optional(),
  "local_latch_wait_time": zod.number().optional(),
  "resolve_lock_time": zod.number().optional(),
  "prewrite_time": zod.number().optional(),
  "wait_prewrite_binlog_time": zod.number().optional(),
  "commit_time": zod.number().optional(),
  "commit_backoff_time": zod.number().optional(),
  "cop_proc_avg": zod.number().optional(),
  "cop_proc_p90": zod.number().optional(),
  "cop_proc_max": zod.number().optional(),
  "cop_wait_avg": zod.number().optional(),
  "cop_wait_p90": zod.number().optional(),
  "cop_wait_max": zod.number().optional(),
  "write_keys": zod.number().optional(),
  "write_size": zod.number().optional(),
  "prewrite_region": zod.number().optional(),
  "txn_retry": zod.number().optional(),
  "request_count": zod.number().optional(),
  "process_keys": zod.number().optional(),
  "total_keys": zod.number().optional(),
  "cop_proc_addr": zod.string().optional(),
  "cop_wait_addr": zod.string().optional(),
  "rocksdb_delete_skipped_count": zod.number().optional(),
  "rocksdb_key_skipped_count": zod.number().optional(),
  "rocksdb_block_cache_hit_count": zod.number().optional(),
  "rocksdb_block_read_count": zod.number().optional(),
  "rocksdb_block_read_byte": zod.number().optional(),
  "binary_plan_text": zod.string().optional(),
  "session_alias": zod.string().optional(),
  "exec_retry_count": zod.number().optional(),
  "preproc_subqueries": zod.number().optional(),
  "kv_total": zod.number().optional(),
  "pd_total": zod.number().optional(),
  "backoff_total": zod.number().optional(),
  "time_queued_by_rc": zod.number().optional(),
  "tidb_cpu_time": zod.number().optional(),
  "tikv_cpu_time": zod.number().optional(),
  "backoff_detail": zod.string().optional(),
  "is_explicit_txn": zod.number().optional(),
  "plan_digest": zod.string().optional(),
  "has_more_results": zod.number().optional(),
  "resource_group": zod.string().optional(),
  "request_unit_read": zod.number().optional(),
  "request_unit_write": zod.number().optional(),
  "result_rows": zod.number().optional(),
  "ru": zod.number().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const diagnosisServiceGetSlowQueryAvailableAdvancedFiltersParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetSlowQueryAvailableAdvancedFiltersResponse = zod.object({
  "filters": zod.array(zod.string()).optional()
})


export const diagnosisServiceGetSlowQueryAvailableAdvancedFilterInfoParams = zod.object({
  "clusterId": zod.string(),
  "filterName": zod.string()
})

export const diagnosisServiceGetSlowQueryAvailableAdvancedFilterInfoResponse = zod.object({
  "name": zod.string().optional(),
  "unit": zod.string().optional(),
  "valueList": zod.array(zod.string()).optional(),
  "type": zod.string().optional()
})


export const diagnosisServiceDownloadSlowQueryListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceDownloadSlowQueryListQueryParams = zod.object({
  "beginTime": zod.string(),
  "endTime": zod.string(),
  "db": zod.array(zod.string()).optional(),
  "text": zod.string().optional(),
  "orderBy": zod.string().optional(),
  "isDesc": zod.boolean().optional(),
  "fields": zod.string().optional(),
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "advancedFilter": zod.array(zod.string()).optional()
})

export const diagnosisServiceDownloadSlowQueryListResponse = zod.object({
  "filename": zod.string().optional(),
  "fileContent": zod.string().optional()
})


export const diagnosisServiceGetSlowQueryAvailableFieldsParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetSlowQueryAvailableFieldsResponse = zod.object({
  "fields": zod.array(zod.string()).optional()
})


export const diagnosisServiceGetSlowQueryDetailParams = zod.object({
  "clusterId": zod.string(),
  "digest": zod.string()
})

export const diagnosisServiceGetSlowQueryDetailQueryParams = zod.object({
  "timestamp": zod.number(),
  "connectionId": zod.string()
})

export const diagnosisServiceGetSlowQueryDetailResponse = zod.object({
  "digest": zod.string().optional(),
  "query": zod.string().optional(),
  "instance": zod.string().optional(),
  "db": zod.string().optional(),
  "connection_id": zod.string().optional(),
  "success": zod.number().optional(),
  "timestamp": zod.number().optional(),
  "query_time": zod.number().optional(),
  "parse_time": zod.number().optional(),
  "compile_time": zod.number().optional(),
  "rewrite_time": zod.number().optional(),
  "preproc_subqueries_time": zod.number().optional(),
  "optimize_time": zod.number().optional(),
  "wait_ts": zod.number().optional(),
  "cop_time": zod.number().optional(),
  "lock_keys_time": zod.number().optional(),
  "write_sql_response_total": zod.number().optional(),
  "exec_retry_time": zod.number().optional(),
  "memory_max": zod.number().optional(),
  "disk_max": zod.number().optional(),
  "txn_start_ts": zod.string().optional(),
  "prev_stmt": zod.string().optional(),
  "plan": zod.string().optional(),
  "binary_plan": zod.string().optional(),
  "warnings": zod.string().optional(),
  "is_internal": zod.number().optional(),
  "index_names": zod.string().optional(),
  "stats": zod.string().optional(),
  "backoff_types": zod.string().optional(),
  "prepared": zod.number().optional(),
  "plan_from_cache": zod.number().optional(),
  "plan_from_binding": zod.number().optional(),
  "user": zod.string().optional(),
  "host": zod.string().optional(),
  "process_time": zod.number().optional(),
  "wait_time": zod.number().optional(),
  "backoff_time": zod.number().optional(),
  "get_commit_ts_time": zod.number().optional(),
  "local_latch_wait_time": zod.number().optional(),
  "resolve_lock_time": zod.number().optional(),
  "prewrite_time": zod.number().optional(),
  "wait_prewrite_binlog_time": zod.number().optional(),
  "commit_time": zod.number().optional(),
  "commit_backoff_time": zod.number().optional(),
  "cop_proc_avg": zod.number().optional(),
  "cop_proc_p90": zod.number().optional(),
  "cop_proc_max": zod.number().optional(),
  "cop_wait_avg": zod.number().optional(),
  "cop_wait_p90": zod.number().optional(),
  "cop_wait_max": zod.number().optional(),
  "write_keys": zod.number().optional(),
  "write_size": zod.number().optional(),
  "prewrite_region": zod.number().optional(),
  "txn_retry": zod.number().optional(),
  "request_count": zod.number().optional(),
  "process_keys": zod.number().optional(),
  "total_keys": zod.number().optional(),
  "cop_proc_addr": zod.string().optional(),
  "cop_wait_addr": zod.string().optional(),
  "rocksdb_delete_skipped_count": zod.number().optional(),
  "rocksdb_key_skipped_count": zod.number().optional(),
  "rocksdb_block_cache_hit_count": zod.number().optional(),
  "rocksdb_block_read_count": zod.number().optional(),
  "rocksdb_block_read_byte": zod.number().optional(),
  "binary_plan_text": zod.string().optional(),
  "session_alias": zod.string().optional(),
  "exec_retry_count": zod.number().optional(),
  "preproc_subqueries": zod.number().optional(),
  "kv_total": zod.number().optional(),
  "pd_total": zod.number().optional(),
  "backoff_total": zod.number().optional(),
  "time_queued_by_rc": zod.number().optional(),
  "tidb_cpu_time": zod.number().optional(),
  "tikv_cpu_time": zod.number().optional(),
  "backoff_detail": zod.string().optional(),
  "is_explicit_txn": zod.number().optional(),
  "plan_digest": zod.string().optional(),
  "has_more_results": zod.number().optional(),
  "resource_group": zod.string().optional(),
  "request_unit_read": zod.number().optional(),
  "request_unit_write": zod.number().optional(),
  "result_rows": zod.number().optional(),
  "ru": zod.number().optional()
})


export const diagnosisServiceAddSqlLimitParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceAddSqlLimitBody = zod.object({
  "resourceGroup": zod.string(),
  "action": zod.enum(['DRYRUN', 'COOLDOWN', 'KILL']),
  "watchText": zod.string()
})

export const diagnosisServiceAddSqlLimitResponse = zod.object({

})


export const diagnosisServiceCheckSqlLimitSupportParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceCheckSqlLimitSupportResponse = zod.object({
  "isSupport": zod.boolean().optional()
})


export const diagnosisServiceRemoveSqlLimitParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceRemoveSqlLimitBody = zod.object({
  "watchText": zod.string(),
  "id": zod.string()
})

export const diagnosisServiceRemoveSqlLimitResponse = zod.object({

})


export const diagnosisServiceGetSqlLimitListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetSqlLimitListQueryParams = zod.object({
  "watchText": zod.string()
})

export const diagnosisServiceGetSqlLimitListResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.string().optional(),
  "resourceGroupName": zod.string().optional(),
  "startTime": zod.string().optional(),
  "endTime": zod.string().optional(),
  "watch": zod.string().optional(),
  "watchText": zod.string().optional(),
  "source": zod.string().optional(),
  "action": zod.enum(['DRYRUN', 'COOLDOWN', 'KILL']).optional()
})).optional()
})


export const diagnosisServiceGetSqlPlanListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetSqlPlanListQueryParams = zod.object({
  "beginTime": zod.string(),
  "endTime": zod.string(),
  "digest": zod.string().optional(),
  "schemaName": zod.string().optional()
})

export const diagnosisServiceGetSqlPlanListResponse = zod.object({
  "data": zod.array(zod.object({
  "summary_begin_time": zod.number().optional(),
  "summary_end_time": zod.number().optional(),
  "digest_text": zod.string().optional(),
  "digest": zod.string().optional(),
  "exec_count": zod.number().optional(),
  "stmt_type": zod.string().optional(),
  "sum_errors": zod.number().optional(),
  "sum_warnings": zod.number().optional(),
  "sum_latency": zod.number().optional(),
  "max_latency": zod.number().optional(),
  "min_latency": zod.number().optional(),
  "avg_latency": zod.number().optional(),
  "avg_parse_latency": zod.number().optional(),
  "max_parse_latency": zod.number().optional(),
  "avg_compile_latency": zod.number().optional(),
  "max_compile_latency": zod.number().optional(),
  "sum_cop_task_num": zod.number().optional(),
  "avg_cop_process_time": zod.number().optional(),
  "max_cop_process_time": zod.number().optional(),
  "avg_cop_wait_time": zod.number().optional(),
  "max_cop_wait_time": zod.number().optional(),
  "avg_process_time": zod.number().optional(),
  "max_process_time": zod.number().optional(),
  "avg_wait_time": zod.number().optional(),
  "max_wait_time": zod.number().optional(),
  "avg_backoff_time": zod.number().optional(),
  "max_backoff_time": zod.number().optional(),
  "avg_total_keys": zod.number().optional(),
  "max_total_keys": zod.number().optional(),
  "avg_processed_keys": zod.number().optional(),
  "max_processed_keys": zod.number().optional(),
  "avg_prewrite_time": zod.number().optional(),
  "max_prewrite_time": zod.number().optional(),
  "avg_commit_time": zod.number().optional(),
  "max_commit_time": zod.number().optional(),
  "avg_get_commit_ts_time": zod.number().optional(),
  "max_get_commit_ts_time": zod.number().optional(),
  "avg_commit_backoff_time": zod.number().optional(),
  "max_commit_backoff_time": zod.number().optional(),
  "avg_resolve_lock_time": zod.number().optional(),
  "max_resolve_lock_time": zod.number().optional(),
  "avg_local_latch_wait_time": zod.number().optional(),
  "max_local_latch_wait_time": zod.number().optional(),
  "avg_write_keys": zod.number().optional(),
  "max_write_keys": zod.number().optional(),
  "avg_write_size": zod.number().optional(),
  "max_write_size": zod.number().optional(),
  "avg_prewrite_regions": zod.number().optional(),
  "max_prewrite_regions": zod.number().optional(),
  "avg_txn_retry": zod.number().optional(),
  "max_txn_retry": zod.number().optional(),
  "sum_backoff_times": zod.number().optional(),
  "avg_mem": zod.number().optional(),
  "max_mem": zod.number().optional(),
  "avg_disk": zod.number().optional(),
  "max_disk": zod.number().optional(),
  "avg_affected_rows": zod.number().optional(),
  "first_seen": zod.number().optional(),
  "last_seen": zod.number().optional(),
  "sample_user": zod.string().optional(),
  "query_sample_text": zod.string().optional(),
  "prev_sample_text": zod.string().optional(),
  "schema_name": zod.string().optional(),
  "table_names": zod.string().optional(),
  "index_names": zod.string().optional(),
  "plan_count": zod.number().optional(),
  "plan": zod.string().optional(),
  "binary_plan": zod.string().optional(),
  "plan_digest": zod.string().optional(),
  "plan_hint": zod.string().optional(),
  "max_rocksdb_delete_skipped_count": zod.number().optional(),
  "avg_rocksdb_delete_skipped_count": zod.number().optional(),
  "max_rocksdb_key_skipped_count": zod.number().optional(),
  "avg_rocksdb_key_skipped_count": zod.number().optional(),
  "max_rocksdb_block_cache_hit_count": zod.number().optional(),
  "avg_rocksdb_block_cache_hit_count": zod.number().optional(),
  "max_rocksdb_block_read_count": zod.number().optional(),
  "avg_rocksdb_block_read_count": zod.number().optional(),
  "max_rocksdb_block_read_byte": zod.number().optional(),
  "avg_rocksdb_block_read_byte": zod.number().optional(),
  "related_schemas": zod.string().optional(),
  "plan_can_be_bound": zod.boolean().optional(),
  "binary_plan_text": zod.string().optional(),
  "resource_group": zod.string().optional(),
  "avg_ru": zod.number().optional(),
  "max_ru": zod.number().optional(),
  "sum_ru": zod.number().optional(),
  "avg_time_queued_by_rc": zod.number().optional(),
  "max_time_queued_by_rc": zod.number().optional(),
  "avg_tidb_cpu_time": zod.number().optional(),
  "avg_tikv_cpu_time": zod.number().optional()
})).optional()
})


export const diagnosisServiceBindSqlPlanParams = zod.object({
  "clusterId": zod.string(),
  "planDigest": zod.string()
})

export const diagnosisServiceBindSqlPlanResponse = zod.object({

})


export const diagnosisServiceCheckSqlPlanSupportParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceCheckSqlPlanSupportResponse = zod.object({
  "isSupport": zod.boolean().optional()
})


export const diagnosisServiceGetSqlPlanBindingListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetSqlPlanBindingListQueryParams = zod.object({
  "beginTime": zod.string(),
  "endTime": zod.string(),
  "digest": zod.string()
})

export const diagnosisServiceGetSqlPlanBindingListResponse = zod.object({
  "data": zod.array(zod.object({
  "status": zod.enum(['enabled', 'using', 'disabled', 'deleted', 'invalid', 'rejected', 'pending verify']).optional(),
  "source": zod.enum(['manual', 'history', 'capture', 'evolve']).optional(),
  "digest": zod.string().optional(),
  "planDigest": zod.string().optional()
})).optional()
})


export const diagnosisServiceUnbindSqlPlanParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceUnbindSqlPlanQueryParams = zod.object({
  "digest": zod.string()
})

export const diagnosisServiceUnbindSqlPlanResponse = zod.object({

})


export const diagnosisServiceGetTopSqlListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetTopSqlListQueryParams = zod.object({
  "beginTime": zod.string(),
  "endTime": zod.string(),
  "db": zod.array(zod.string()).optional(),
  "text": zod.string().optional(),
  "orderBy": zod.string().optional(),
  "isDesc": zod.boolean().optional(),
  "fields": zod.string().optional(),
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "advancedFilter": zod.array(zod.string()).optional(),
  "isGroupByTime": zod.boolean().optional()
})

export const diagnosisServiceGetTopSqlListResponse = zod.object({
  "data": zod.array(zod.object({
  "summary_begin_time": zod.number().optional(),
  "summary_end_time": zod.number().optional(),
  "digest_text": zod.string().optional(),
  "digest": zod.string().optional(),
  "exec_count": zod.number().optional(),
  "stmt_type": zod.string().optional(),
  "sum_errors": zod.number().optional(),
  "sum_warnings": zod.number().optional(),
  "sum_latency": zod.number().optional(),
  "max_latency": zod.number().optional(),
  "min_latency": zod.number().optional(),
  "avg_latency": zod.number().optional(),
  "avg_parse_latency": zod.number().optional(),
  "max_parse_latency": zod.number().optional(),
  "avg_compile_latency": zod.number().optional(),
  "max_compile_latency": zod.number().optional(),
  "sum_cop_task_num": zod.number().optional(),
  "avg_cop_process_time": zod.number().optional(),
  "max_cop_process_time": zod.number().optional(),
  "avg_cop_wait_time": zod.number().optional(),
  "max_cop_wait_time": zod.number().optional(),
  "avg_process_time": zod.number().optional(),
  "max_process_time": zod.number().optional(),
  "avg_wait_time": zod.number().optional(),
  "max_wait_time": zod.number().optional(),
  "avg_backoff_time": zod.number().optional(),
  "max_backoff_time": zod.number().optional(),
  "avg_total_keys": zod.number().optional(),
  "max_total_keys": zod.number().optional(),
  "avg_processed_keys": zod.number().optional(),
  "max_processed_keys": zod.number().optional(),
  "avg_prewrite_time": zod.number().optional(),
  "max_prewrite_time": zod.number().optional(),
  "avg_commit_time": zod.number().optional(),
  "max_commit_time": zod.number().optional(),
  "avg_get_commit_ts_time": zod.number().optional(),
  "max_get_commit_ts_time": zod.number().optional(),
  "avg_commit_backoff_time": zod.number().optional(),
  "max_commit_backoff_time": zod.number().optional(),
  "avg_resolve_lock_time": zod.number().optional(),
  "max_resolve_lock_time": zod.number().optional(),
  "avg_local_latch_wait_time": zod.number().optional(),
  "max_local_latch_wait_time": zod.number().optional(),
  "avg_write_keys": zod.number().optional(),
  "max_write_keys": zod.number().optional(),
  "avg_write_size": zod.number().optional(),
  "max_write_size": zod.number().optional(),
  "avg_prewrite_regions": zod.number().optional(),
  "max_prewrite_regions": zod.number().optional(),
  "avg_txn_retry": zod.number().optional(),
  "max_txn_retry": zod.number().optional(),
  "sum_backoff_times": zod.number().optional(),
  "avg_mem": zod.number().optional(),
  "max_mem": zod.number().optional(),
  "avg_disk": zod.number().optional(),
  "max_disk": zod.number().optional(),
  "avg_affected_rows": zod.number().optional(),
  "first_seen": zod.number().optional(),
  "last_seen": zod.number().optional(),
  "sample_user": zod.string().optional(),
  "query_sample_text": zod.string().optional(),
  "prev_sample_text": zod.string().optional(),
  "schema_name": zod.string().optional(),
  "table_names": zod.string().optional(),
  "index_names": zod.string().optional(),
  "plan_count": zod.number().optional(),
  "plan": zod.string().optional(),
  "binary_plan": zod.string().optional(),
  "plan_digest": zod.string().optional(),
  "plan_hint": zod.string().optional(),
  "max_rocksdb_delete_skipped_count": zod.number().optional(),
  "avg_rocksdb_delete_skipped_count": zod.number().optional(),
  "max_rocksdb_key_skipped_count": zod.number().optional(),
  "avg_rocksdb_key_skipped_count": zod.number().optional(),
  "max_rocksdb_block_cache_hit_count": zod.number().optional(),
  "avg_rocksdb_block_cache_hit_count": zod.number().optional(),
  "max_rocksdb_block_read_count": zod.number().optional(),
  "avg_rocksdb_block_read_count": zod.number().optional(),
  "max_rocksdb_block_read_byte": zod.number().optional(),
  "avg_rocksdb_block_read_byte": zod.number().optional(),
  "related_schemas": zod.string().optional(),
  "plan_can_be_bound": zod.boolean().optional(),
  "binary_plan_text": zod.string().optional(),
  "resource_group": zod.string().optional(),
  "avg_ru": zod.number().optional(),
  "max_ru": zod.number().optional(),
  "sum_ru": zod.number().optional(),
  "avg_time_queued_by_rc": zod.number().optional(),
  "max_time_queued_by_rc": zod.number().optional(),
  "avg_tidb_cpu_time": zod.number().optional(),
  "avg_tikv_cpu_time": zod.number().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const diagnosisServiceGetTopSqlAvailableAdvancedFiltersParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetTopSqlAvailableAdvancedFiltersResponse = zod.object({
  "filters": zod.array(zod.string()).optional()
})


export const diagnosisServiceGetTopSqlAvailableAdvancedFilterInfoParams = zod.object({
  "clusterId": zod.string(),
  "filterName": zod.string()
})

export const diagnosisServiceGetTopSqlAvailableAdvancedFilterInfoResponse = zod.object({
  "name": zod.string().optional(),
  "unit": zod.string().optional(),
  "valueList": zod.array(zod.string()).optional(),
  "type": zod.string().optional()
})


export const diagnosisServiceGetTopSqlConfigsParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetTopSqlConfigsResponse = zod.object({
  "enable": zod.boolean().optional(),
  "refreshInterval": zod.number().optional(),
  "historySize": zod.number().optional(),
  "maxSize": zod.number().optional(),
  "internalQuery": zod.boolean().optional()
})


export const diagnosisServiceUpdateTopSqlConfigsParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceUpdateTopSqlConfigsBody = zod.object({
  "enable": zod.boolean(),
  "refreshInterval": zod.number().optional(),
  "historySize": zod.number().optional(),
  "maxSize": zod.number().optional(),
  "internalQuery": zod.boolean().optional()
})

export const diagnosisServiceUpdateTopSqlConfigsResponse = zod.object({
  "enable": zod.boolean().optional(),
  "refreshInterval": zod.number().optional(),
  "historySize": zod.number().optional(),
  "maxSize": zod.number().optional(),
  "internalQuery": zod.boolean().optional()
})


export const diagnosisServiceGetTopSqlAvailableFieldsParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetTopSqlAvailableFieldsResponse = zod.object({
  "fields": zod.array(zod.string()).optional()
})


export const diagnosisServiceGetTopSqlDetailParams = zod.object({
  "clusterId": zod.string(),
  "digest": zod.string()
})

export const diagnosisServiceGetTopSqlDetailQueryParams = zod.object({
  "beginTime": zod.string(),
  "endTime": zod.string(),
  "planDigest": zod.array(zod.string()).optional()
})

export const diagnosisServiceGetTopSqlDetailResponse = zod.object({
  "summary_begin_time": zod.number().optional(),
  "summary_end_time": zod.number().optional(),
  "digest_text": zod.string().optional(),
  "digest": zod.string().optional(),
  "exec_count": zod.number().optional(),
  "stmt_type": zod.string().optional(),
  "sum_errors": zod.number().optional(),
  "sum_warnings": zod.number().optional(),
  "sum_latency": zod.number().optional(),
  "max_latency": zod.number().optional(),
  "min_latency": zod.number().optional(),
  "avg_latency": zod.number().optional(),
  "avg_parse_latency": zod.number().optional(),
  "max_parse_latency": zod.number().optional(),
  "avg_compile_latency": zod.number().optional(),
  "max_compile_latency": zod.number().optional(),
  "sum_cop_task_num": zod.number().optional(),
  "avg_cop_process_time": zod.number().optional(),
  "max_cop_process_time": zod.number().optional(),
  "avg_cop_wait_time": zod.number().optional(),
  "max_cop_wait_time": zod.number().optional(),
  "avg_process_time": zod.number().optional(),
  "max_process_time": zod.number().optional(),
  "avg_wait_time": zod.number().optional(),
  "max_wait_time": zod.number().optional(),
  "avg_backoff_time": zod.number().optional(),
  "max_backoff_time": zod.number().optional(),
  "avg_total_keys": zod.number().optional(),
  "max_total_keys": zod.number().optional(),
  "avg_processed_keys": zod.number().optional(),
  "max_processed_keys": zod.number().optional(),
  "avg_prewrite_time": zod.number().optional(),
  "max_prewrite_time": zod.number().optional(),
  "avg_commit_time": zod.number().optional(),
  "max_commit_time": zod.number().optional(),
  "avg_get_commit_ts_time": zod.number().optional(),
  "max_get_commit_ts_time": zod.number().optional(),
  "avg_commit_backoff_time": zod.number().optional(),
  "max_commit_backoff_time": zod.number().optional(),
  "avg_resolve_lock_time": zod.number().optional(),
  "max_resolve_lock_time": zod.number().optional(),
  "avg_local_latch_wait_time": zod.number().optional(),
  "max_local_latch_wait_time": zod.number().optional(),
  "avg_write_keys": zod.number().optional(),
  "max_write_keys": zod.number().optional(),
  "avg_write_size": zod.number().optional(),
  "max_write_size": zod.number().optional(),
  "avg_prewrite_regions": zod.number().optional(),
  "max_prewrite_regions": zod.number().optional(),
  "avg_txn_retry": zod.number().optional(),
  "max_txn_retry": zod.number().optional(),
  "sum_backoff_times": zod.number().optional(),
  "avg_mem": zod.number().optional(),
  "max_mem": zod.number().optional(),
  "avg_disk": zod.number().optional(),
  "max_disk": zod.number().optional(),
  "avg_affected_rows": zod.number().optional(),
  "first_seen": zod.number().optional(),
  "last_seen": zod.number().optional(),
  "sample_user": zod.string().optional(),
  "query_sample_text": zod.string().optional(),
  "prev_sample_text": zod.string().optional(),
  "schema_name": zod.string().optional(),
  "table_names": zod.string().optional(),
  "index_names": zod.string().optional(),
  "plan_count": zod.number().optional(),
  "plan": zod.string().optional(),
  "binary_plan": zod.string().optional(),
  "plan_digest": zod.string().optional(),
  "plan_hint": zod.string().optional(),
  "max_rocksdb_delete_skipped_count": zod.number().optional(),
  "avg_rocksdb_delete_skipped_count": zod.number().optional(),
  "max_rocksdb_key_skipped_count": zod.number().optional(),
  "avg_rocksdb_key_skipped_count": zod.number().optional(),
  "max_rocksdb_block_cache_hit_count": zod.number().optional(),
  "avg_rocksdb_block_cache_hit_count": zod.number().optional(),
  "max_rocksdb_block_read_count": zod.number().optional(),
  "avg_rocksdb_block_read_count": zod.number().optional(),
  "max_rocksdb_block_read_byte": zod.number().optional(),
  "avg_rocksdb_block_read_byte": zod.number().optional(),
  "related_schemas": zod.string().optional(),
  "plan_can_be_bound": zod.boolean().optional(),
  "binary_plan_text": zod.string().optional(),
  "resource_group": zod.string().optional(),
  "avg_ru": zod.number().optional(),
  "max_ru": zod.number().optional(),
  "sum_ru": zod.number().optional(),
  "avg_time_queued_by_rc": zod.number().optional(),
  "max_time_queued_by_rc": zod.number().optional(),
  "avg_tidb_cpu_time": zod.number().optional(),
  "avg_tikv_cpu_time": zod.number().optional()
})


export const credentialServiceListCredentialsQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "credentialType": zod.enum(['CREDENTIAL_TYPE_UNSPECIFIED', 'HOST', 'TIDB']).optional(),
  "credentialId": zod.string().optional()
})

export const credentialServiceListCredentialsResponse = zod.object({
  "credentials": zod.array(zod.object({
  "credentialId": zod.string().optional(),
  "userName": zod.string(),
  "credentialType": zod.enum(['CREDENTIAL_TYPE_UNSPECIFIED', 'HOST', 'TIDB']).optional(),
  "validateType": zod.enum(['CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED', 'PASSWORD', 'RSAKEY']).optional(),
  "credentialName": zod.string().optional(),
  "description": zod.string().optional(),
  "hostCredential": zod.object({
  "password": zod.string().optional(),
  "publicKey": zod.string().optional(),
  "privateKey": zod.string().optional(),
  "hostIps": zod.array(zod.string()).optional()
}).optional(),
  "tidbCredential": zod.object({
  "password": zod.string(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
}).optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const credentialServiceCreateCredentialBody = zod.object({
  "credentialId": zod.string().optional(),
  "userName": zod.string(),
  "credentialType": zod.enum(['CREDENTIAL_TYPE_UNSPECIFIED', 'HOST', 'TIDB']).optional(),
  "validateType": zod.enum(['CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED', 'PASSWORD', 'RSAKEY']).optional(),
  "credentialName": zod.string().optional(),
  "description": zod.string().optional(),
  "hostCredential": zod.object({
  "password": zod.string().optional(),
  "publicKey": zod.string().optional(),
  "privateKey": zod.string().optional(),
  "hostIps": zod.array(zod.string()).optional()
}).optional(),
  "tidbCredential": zod.object({
  "password": zod.string(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
}).optional()
})

export const credentialServiceCreateCredentialResponse = zod.object({
  "credentialId": zod.string().optional(),
  "userName": zod.string(),
  "credentialType": zod.enum(['CREDENTIAL_TYPE_UNSPECIFIED', 'HOST', 'TIDB']).optional(),
  "validateType": zod.enum(['CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED', 'PASSWORD', 'RSAKEY']).optional(),
  "credentialName": zod.string().optional(),
  "description": zod.string().optional(),
  "hostCredential": zod.object({
  "password": zod.string().optional(),
  "publicKey": zod.string().optional(),
  "privateKey": zod.string().optional(),
  "hostIps": zod.array(zod.string()).optional()
}).optional(),
  "tidbCredential": zod.object({
  "password": zod.string(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
}).optional()
})


export const credentialServiceGetCredentialParams = zod.object({
  "credentialId": zod.string()
})

export const credentialServiceGetCredentialResponse = zod.object({
  "credentialId": zod.string().optional(),
  "userName": zod.string(),
  "credentialType": zod.enum(['CREDENTIAL_TYPE_UNSPECIFIED', 'HOST', 'TIDB']).optional(),
  "validateType": zod.enum(['CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED', 'PASSWORD', 'RSAKEY']).optional(),
  "credentialName": zod.string().optional(),
  "description": zod.string().optional(),
  "hostCredential": zod.object({
  "password": zod.string().optional(),
  "publicKey": zod.string().optional(),
  "privateKey": zod.string().optional(),
  "hostIps": zod.array(zod.string()).optional()
}).optional(),
  "tidbCredential": zod.object({
  "password": zod.string(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
}).optional()
})


export const credentialServiceDeleteCredentialParams = zod.object({
  "credentialId": zod.string()
})

export const credentialServiceDeleteCredentialResponse = zod.object({

})


export const credentialServiceUpdateCredentialParams = zod.object({
  "credentialId": zod.string()
})

export const credentialServiceUpdateCredentialBody = zod.object({
  "userName": zod.string(),
  "credentialType": zod.enum(['CREDENTIAL_TYPE_UNSPECIFIED', 'HOST', 'TIDB']).optional(),
  "validateType": zod.enum(['CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED', 'PASSWORD', 'RSAKEY']).optional(),
  "credentialName": zod.string().optional(),
  "description": zod.string().optional(),
  "hostCredential": zod.object({
  "password": zod.string().optional(),
  "publicKey": zod.string().optional(),
  "privateKey": zod.string().optional(),
  "hostIps": zod.array(zod.string()).optional()
}).optional(),
  "tidbCredential": zod.object({
  "password": zod.string(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
}).optional(),
  "forceUpdate": zod.boolean().optional()
})

export const credentialServiceUpdateCredentialResponse = zod.object({
  "credentialId": zod.string().optional(),
  "userName": zod.string(),
  "credentialType": zod.enum(['CREDENTIAL_TYPE_UNSPECIFIED', 'HOST', 'TIDB']).optional(),
  "validateType": zod.enum(['CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED', 'PASSWORD', 'RSAKEY']).optional(),
  "credentialName": zod.string().optional(),
  "description": zod.string().optional(),
  "hostCredential": zod.object({
  "password": zod.string().optional(),
  "publicKey": zod.string().optional(),
  "privateKey": zod.string().optional(),
  "hostIps": zod.array(zod.string()).optional()
}).optional(),
  "tidbCredential": zod.object({
  "password": zod.string(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
}).optional()
})


export const credentialServiceDownloadRSAKeyParams = zod.object({
  "credentialId": zod.string()
})

export const credentialServiceDownloadRSAKeyResponse = zod.object({
  "data": zod.string().optional()
})


export const credentialServiceGenerateRSAKeyBody = zod.object({

})

export const credentialServiceGenerateRSAKeyResponse = zod.object({
  "publicKey": zod.string().optional(),
  "privateKey": zod.string().optional()
})


export const credentialServiceValidateConnectionBody = zod.object({
  "credentialId": zod.string()
})

export const credentialServiceValidateConnectionResponse = zod.object({
  "connectionResult": zod.string().optional(),
  "inaccessibleHosts": zod.array(zod.string()).optional()
})


export const hostServiceListHostsQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "searchValue": zod.string().optional(),
  "locationIds": zod.array(zod.string()).optional(),
  "tagIds": zod.array(zod.string()).optional()
})

export const hostServiceListHostsResponse = zod.object({
  "hosts": zod.array(zod.object({
  "hostId": zod.string(),
  "ip": zod.string().optional(),
  "hostName": zod.string().optional(),
  "sshPort": zod.number().optional(),
  "status": zod.enum(['initializing', 'deleting', 'deleted', 'used', 'idle']).optional(),
  "connectionStatus": zod.enum(['online', 'offline']).optional(),
  "checkStatus": zod.enum(['checking', 'failed', 'warning', 'succeeded']).optional(),
  "credentialId": zod.string().optional(),
  "reportId": zod.string().optional(),
  "osName": zod.string().optional(),
  "osVendor": zod.string().optional(),
  "osVersion": zod.string().optional(),
  "osRelease": zod.string().optional(),
  "osArchitecture": zod.string().optional(),
  "cpuVendor": zod.string().optional(),
  "cpuModel": zod.string().optional(),
  "cpuSpeed": zod.number().optional(),
  "cpuCache": zod.number().optional(),
  "cpus": zod.number().optional(),
  "cpuThreads": zod.number().optional(),
  "cpuGovernor": zod.string().optional(),
  "cpuArch": zod.string().optional(),
  "memoryType": zod.string().optional(),
  "memorySpeed": zod.number().optional(),
  "memorySize": zod.number().optional(),
  "memorySwap": zod.number().optional(),
  "cpuNumaNodes": zod.number().optional(),
  "storageTotalSize": zod.number().optional(),
  "storageAvailable": zod.number().optional(),
  "storageUsed": zod.number().optional(),
  "diskType": zod.string().optional(),
  "clusters": zod.array(zod.object({
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
})).optional(),
  "nodeExporterPort": zod.number().optional(),
  "tiupIds": zod.array(zod.string()).optional(),
  "hostType": zod.enum(['VM', 'PM']).optional(),
  "comment": zod.string().optional(),
  "tags": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})).optional(),
  "createdTime": zod.string().datetime().optional(),
  "updatedTime": zod.string().datetime().optional(),
  "credential": zod.object({
  "credentialId": zod.string().optional(),
  "userName": zod.string(),
  "credentialType": zod.enum(['CREDENTIAL_TYPE_UNSPECIFIED', 'HOST', 'TIDB']).optional(),
  "validateType": zod.enum(['CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED', 'PASSWORD', 'RSAKEY']).optional(),
  "credentialName": zod.string().optional(),
  "description": zod.string().optional(),
  "hostCredential": zod.object({
  "password": zod.string().optional(),
  "publicKey": zod.string().optional(),
  "privateKey": zod.string().optional(),
  "hostIps": zod.array(zod.string()).optional()
}).optional(),
  "tidbCredential": zod.object({
  "password": zod.string(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
}).optional()
}).optional(),
  "locationMappings": zod.array(zod.object({
  "locationId": zod.string().optional(),
  "parentId": zod.string().optional(),
  "locationKey": zod.string(),
  "locationValue": zod.string()
})).optional(),
  "memoryUnit": zod.string().optional(),
  "storageUnit": zod.string().optional(),
  "locationId": zod.string().optional(),
  "cpuCores": zod.number().optional()
})),
  "nextPageToken": zod.string(),
  "totalSize": zod.number()
})


export const hostServiceCreateHostsBody = zod.object({
  "ips": zod.array(zod.string()).optional(),
  "sshPort": zod.number().optional(),
  "credentialId": zod.string().optional(),
  "locationId": zod.string().optional(),
  "tagIds": zod.array(zod.string()).optional(),
  "comment": zod.string().optional()
})

export const hostServiceCreateHostsResponse = zod.object({
  "taskId": zod.string().optional()
})


export const hostServiceImportResponse = zod.object({
  "task": zod.array(zod.object({
  "taskId": zod.string(),
  "hostId": zod.string(),
  "reportId": zod.string().optional(),
  "ip": zod.string(),
  "userName": zod.string().optional(),
  "sshPort": zod.number(),
  "status": zod.enum(['init', 'existed', 'succeeded', 'failed']).optional(),
  "tags": zod.string().optional(),
  "locationId": zod.string().optional(),
  "credentialId": zod.string().optional(),
  "hostName": zod.string().optional(),
  "tagsList": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})).optional(),
  "locationMappings": zod.array(zod.object({
  "locationId": zod.string().optional(),
  "parentId": zod.string().optional(),
  "locationKey": zod.string(),
  "locationValue": zod.string()
})).optional(),
  "credential": zod.object({
  "credentialId": zod.string().optional(),
  "userName": zod.string(),
  "credentialType": zod.enum(['CREDENTIAL_TYPE_UNSPECIFIED', 'HOST', 'TIDB']).optional(),
  "validateType": zod.enum(['CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED', 'PASSWORD', 'RSAKEY']).optional(),
  "credentialName": zod.string().optional(),
  "description": zod.string().optional(),
  "hostCredential": zod.object({
  "password": zod.string().optional(),
  "publicKey": zod.string().optional(),
  "privateKey": zod.string().optional(),
  "hostIps": zod.array(zod.string()).optional()
}).optional(),
  "tidbCredential": zod.object({
  "password": zod.string(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
}).optional()
}).optional()
})),
  "taskId": zod.string()
})


export const hostServiceImportTaskParams = zod.object({
  "taskId": zod.string()
})

export const hostServiceImportTaskResponse = zod.object({
  "task": zod.array(zod.object({
  "taskId": zod.string(),
  "hostId": zod.string(),
  "reportId": zod.string().optional(),
  "ip": zod.string(),
  "userName": zod.string().optional(),
  "sshPort": zod.number(),
  "status": zod.enum(['init', 'existed', 'succeeded', 'failed']).optional(),
  "tags": zod.string().optional(),
  "locationId": zod.string().optional(),
  "credentialId": zod.string().optional(),
  "hostName": zod.string().optional(),
  "tagsList": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})).optional(),
  "locationMappings": zod.array(zod.object({
  "locationId": zod.string().optional(),
  "parentId": zod.string().optional(),
  "locationKey": zod.string(),
  "locationValue": zod.string()
})).optional(),
  "credential": zod.object({
  "credentialId": zod.string().optional(),
  "userName": zod.string(),
  "credentialType": zod.enum(['CREDENTIAL_TYPE_UNSPECIFIED', 'HOST', 'TIDB']).optional(),
  "validateType": zod.enum(['CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED', 'PASSWORD', 'RSAKEY']).optional(),
  "credentialName": zod.string().optional(),
  "description": zod.string().optional(),
  "hostCredential": zod.object({
  "password": zod.string().optional(),
  "publicKey": zod.string().optional(),
  "privateKey": zod.string().optional(),
  "hostIps": zod.array(zod.string()).optional()
}).optional(),
  "tidbCredential": zod.object({
  "password": zod.string(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
}).optional()
}).optional()
})),
  "taskId": zod.string()
})


export const hostServiceHostConfirmParams = zod.object({
  "taskId": zod.string()
})

export const hostServiceHostConfirmBody = zod.object({

})

export const hostServiceHostConfirmResponse = zod.object({
  "taskId": zod.string()
})


export const hostServiceGetHostParams = zod.object({
  "hostId": zod.string()
})

export const hostServiceGetHostResponse = zod.object({
  "hostId": zod.string(),
  "ip": zod.string().optional(),
  "hostName": zod.string().optional(),
  "sshPort": zod.number().optional(),
  "status": zod.enum(['initializing', 'deleting', 'deleted', 'used', 'idle']).optional(),
  "connectionStatus": zod.enum(['online', 'offline']).optional(),
  "checkStatus": zod.enum(['checking', 'failed', 'warning', 'succeeded']).optional(),
  "credentialId": zod.string().optional(),
  "reportId": zod.string().optional(),
  "osName": zod.string().optional(),
  "osVendor": zod.string().optional(),
  "osVersion": zod.string().optional(),
  "osRelease": zod.string().optional(),
  "osArchitecture": zod.string().optional(),
  "cpuVendor": zod.string().optional(),
  "cpuModel": zod.string().optional(),
  "cpuSpeed": zod.number().optional(),
  "cpuCache": zod.number().optional(),
  "cpus": zod.number().optional(),
  "cpuThreads": zod.number().optional(),
  "cpuGovernor": zod.string().optional(),
  "cpuArch": zod.string().optional(),
  "memoryType": zod.string().optional(),
  "memorySpeed": zod.number().optional(),
  "memorySize": zod.number().optional(),
  "memorySwap": zod.number().optional(),
  "cpuNumaNodes": zod.number().optional(),
  "storageTotalSize": zod.number().optional(),
  "storageAvailable": zod.number().optional(),
  "storageUsed": zod.number().optional(),
  "diskType": zod.string().optional(),
  "clusters": zod.array(zod.object({
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
})).optional(),
  "nodeExporterPort": zod.number().optional(),
  "tiupIds": zod.array(zod.string()).optional(),
  "hostType": zod.enum(['VM', 'PM']).optional(),
  "comment": zod.string().optional(),
  "tags": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})).optional(),
  "createdTime": zod.string().datetime().optional(),
  "updatedTime": zod.string().datetime().optional(),
  "credential": zod.object({
  "credentialId": zod.string().optional(),
  "userName": zod.string(),
  "credentialType": zod.enum(['CREDENTIAL_TYPE_UNSPECIFIED', 'HOST', 'TIDB']).optional(),
  "validateType": zod.enum(['CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED', 'PASSWORD', 'RSAKEY']).optional(),
  "credentialName": zod.string().optional(),
  "description": zod.string().optional(),
  "hostCredential": zod.object({
  "password": zod.string().optional(),
  "publicKey": zod.string().optional(),
  "privateKey": zod.string().optional(),
  "hostIps": zod.array(zod.string()).optional()
}).optional(),
  "tidbCredential": zod.object({
  "password": zod.string(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
}).optional()
}).optional(),
  "locationMappings": zod.array(zod.object({
  "locationId": zod.string().optional(),
  "parentId": zod.string().optional(),
  "locationKey": zod.string(),
  "locationValue": zod.string()
})).optional(),
  "memoryUnit": zod.string().optional(),
  "storageUnit": zod.string().optional(),
  "locationId": zod.string().optional(),
  "cpuCores": zod.number().optional()
})


export const hostServiceDeleteParams = zod.object({
  "hostId": zod.string()
})

export const hostServiceDeleteResponse = zod.object({

})


export const hostServiceUpdateHostParams = zod.object({
  "hostId": zod.string()
})

export const hostServiceUpdateHostBody = zod.object({
  "host": zod.object({
  "hostId": zod.string().optional(),
  "sshPort": zod.number().optional(),
  "credentialId": zod.string().optional(),
  "locationId": zod.string().optional(),
  "tagIds": zod.array(zod.string()).optional(),
  "comment": zod.string().optional()
}).optional()
})

export const hostServiceUpdateHostResponse = zod.object({
  "hostId": zod.string(),
  "ip": zod.string().optional(),
  "hostName": zod.string().optional(),
  "sshPort": zod.number().optional(),
  "status": zod.enum(['initializing', 'deleting', 'deleted', 'used', 'idle']).optional(),
  "connectionStatus": zod.enum(['online', 'offline']).optional(),
  "checkStatus": zod.enum(['checking', 'failed', 'warning', 'succeeded']).optional(),
  "credentialId": zod.string().optional(),
  "reportId": zod.string().optional(),
  "osName": zod.string().optional(),
  "osVendor": zod.string().optional(),
  "osVersion": zod.string().optional(),
  "osRelease": zod.string().optional(),
  "osArchitecture": zod.string().optional(),
  "cpuVendor": zod.string().optional(),
  "cpuModel": zod.string().optional(),
  "cpuSpeed": zod.number().optional(),
  "cpuCache": zod.number().optional(),
  "cpus": zod.number().optional(),
  "cpuThreads": zod.number().optional(),
  "cpuGovernor": zod.string().optional(),
  "cpuArch": zod.string().optional(),
  "memoryType": zod.string().optional(),
  "memorySpeed": zod.number().optional(),
  "memorySize": zod.number().optional(),
  "memorySwap": zod.number().optional(),
  "cpuNumaNodes": zod.number().optional(),
  "storageTotalSize": zod.number().optional(),
  "storageAvailable": zod.number().optional(),
  "storageUsed": zod.number().optional(),
  "diskType": zod.string().optional(),
  "clusters": zod.array(zod.object({
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
})).optional(),
  "nodeExporterPort": zod.number().optional(),
  "tiupIds": zod.array(zod.string()).optional(),
  "hostType": zod.enum(['VM', 'PM']).optional(),
  "comment": zod.string().optional(),
  "tags": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})).optional(),
  "createdTime": zod.string().datetime().optional(),
  "updatedTime": zod.string().datetime().optional(),
  "credential": zod.object({
  "credentialId": zod.string().optional(),
  "userName": zod.string(),
  "credentialType": zod.enum(['CREDENTIAL_TYPE_UNSPECIFIED', 'HOST', 'TIDB']).optional(),
  "validateType": zod.enum(['CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED', 'PASSWORD', 'RSAKEY']).optional(),
  "credentialName": zod.string().optional(),
  "description": zod.string().optional(),
  "hostCredential": zod.object({
  "password": zod.string().optional(),
  "publicKey": zod.string().optional(),
  "privateKey": zod.string().optional(),
  "hostIps": zod.array(zod.string()).optional()
}).optional(),
  "tidbCredential": zod.object({
  "password": zod.string(),
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional()
}).optional()
}).optional(),
  "locationMappings": zod.array(zod.object({
  "locationId": zod.string().optional(),
  "parentId": zod.string().optional(),
  "locationKey": zod.string(),
  "locationValue": zod.string()
})).optional(),
  "memoryUnit": zod.string().optional(),
  "storageUnit": zod.string().optional(),
  "locationId": zod.string().optional(),
  "cpuCores": zod.number().optional()
})


export const hostServiceGetDisksParams = zod.object({
  "hostId": zod.string()
})

export const hostServiceGetDisksResponse = zod.object({
  "disk": zod.array(zod.object({
  "path": zod.string().optional(),
  "totalSize": zod.number().optional(),
  "usedSpace": zod.number().optional(),
  "availableSpace": zod.number().optional(),
  "mountingDir": zod.string().optional(),
  "diskType": zod.enum(['HDD', 'SSD']).optional()
})).optional()
})


export const metricsServiceGetHostMetricDataParams = zod.object({
  "hostId": zod.string(),
  "name": zod.string()
})

export const metricsServiceGetHostMetricDataQueryParams = zod.object({
  "startTime": zod.string(),
  "endTime": zod.string(),
  "step": zod.string().optional(),
  "label": zod.string().optional(),
  "range": zod.string().optional()
})

export const metricsServiceGetHostMetricDataResponse = zod.object({
  "status": zod.string().optional(),
  "data": zod.array(zod.object({
  "expr": zod.string().optional(),
  "legend": zod.string().optional(),
  "result": zod.array(zod.object({
  "metric": zod.object({
  "instance": zod.string().optional(),
  "sqlType": zod.string().optional(),
  "type": zod.string().optional(),
  "result": zod.string().optional(),
  "txnMode": zod.string().optional(),
  "job": zod.string().optional(),
  "device": zod.string().optional(),
  "fstype": zod.string().optional(),
  "mountpoint": zod.string().optional(),
  "module": zod.string().optional(),
  "kind": zod.string().optional(),
  "ping": zod.string().optional()
}).optional(),
  "values": zod.array(zod.object({
  "timestamp": zod.number().optional(),
  "value": zod.string().optional()
})).optional()
})).optional()
})).optional()
})


export const hostServiceReportParams = zod.object({
  "hostId": zod.string(),
  "reportId": zod.string()
})

export const hostServiceReportResponse = zod.object({
  "taskId": zod.string(),
  "taskState": zod.enum(['init', 'running', 'success', 'fail']).optional(),
  "reports": zod.array(zod.object({
  "reportId": zod.string(),
  "hostId": zod.string().optional(),
  "checkId": zod.string().optional(),
  "checkName": zod.string().optional(),
  "checkOut": zod.string().optional(),
  "checkDesc": zod.string().optional(),
  "checkResult": zod.enum(['passed', 'failed', 'warned']).optional(),
  "optional": zod.boolean().enum(['true', 'false']).optional(),
  "fixable": zod.boolean().enum(['true', 'false']).optional(),
  "checkBody": zod.string().optional()
})).optional()
})


export const hostServiceGetTiDBProcessesParams = zod.object({
  "hostId": zod.string()
})

export const hostServiceGetTiDBProcessesResponse = zod.object({
  "tiDBProcesses": zod.array(zod.object({
  "uid": zod.string().optional(),
  "pid": zod.number().optional(),
  "ppid": zod.number().optional(),
  "startTime": zod.string().optional(),
  "runningTime": zod.string().optional(),
  "cmd": zod.string().optional()
})).optional()
})


export const hostServiceFixParams = zod.object({
  "hostId": zod.string()
})

export const hostServiceFixResponse = zod.object({
  "hostId": zod.string(),
  "taskId": zod.string(),
  "reportId": zod.string()
})


export const hostServiceCheckParams = zod.object({
  "hostId": zod.string()
})

export const hostServiceCheckResponse = zod.object({
  "hostId": zod.string(),
  "taskId": zod.string(),
  "reportId": zod.string()
})


export const hostServiceBatchDeleteBody = zod.object({
  "hostId": zod.array(zod.string())
})

export const hostServiceBatchDeleteResponse = zod.object({

})


export const hostServiceDownloadListHostsQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "searchValue": zod.string().optional(),
  "locationIds": zod.array(zod.string()).optional(),
  "tagIds": zod.array(zod.string()).optional()
})

export const hostServiceDownloadListHostsResponse = zod.object({
  "data": zod.string().optional()
})


export const hostServiceDownloadHostTemplateResponse = zod.object({
  "data": zod.string().optional()
})


export const licenseServiceGetLicenseResponse = zod.object({
  "licenseId": zod.string().optional(),
  "version": zod.string().optional(),
  "licenseType": zod.enum(['free', 'ultimate']).optional(),
  "allow": zod.array(zod.string()).optional(),
  "deny": zod.array(zod.string()).optional(),
  "activateAt": zod.string().datetime().optional(),
  "expirationAt": zod.string().datetime().optional(),
  "signature": zod.string().optional(),
  "hosts": zod.string().optional(),
  "vcpu": zod.string().optional(),
  "alerts": zod.string().optional(),
  "customerCode": zod.string().optional(),
  "deviceCode": zod.string().optional(),
  "status": zod.enum(['active', 'expired', 'expiring', 'invalid', 'revoked']).optional()
})


export const licenseServiceGetDeviceCodeResponse = zod.object({
  "deviceCode": zod.string().optional()
})


export const licenseServiceActivateLicenseResponse = zod.object({
  "licenseId": zod.string().optional(),
  "version": zod.string().optional(),
  "licenseType": zod.enum(['free', 'ultimate']).optional(),
  "allow": zod.array(zod.string()).optional(),
  "deny": zod.array(zod.string()).optional(),
  "activateAt": zod.string().datetime().optional(),
  "expirationAt": zod.string().datetime().optional(),
  "signature": zod.string().optional(),
  "hosts": zod.string().optional(),
  "vcpu": zod.string().optional(),
  "alerts": zod.string().optional(),
  "customerCode": zod.string().optional(),
  "deviceCode": zod.string().optional(),
  "status": zod.enum(['active', 'expired', 'expiring', 'invalid', 'revoked']).optional()
})


export const licenseServiceActivateFreeLicenseResponse = zod.object({
  "licenseId": zod.string().optional(),
  "version": zod.string().optional(),
  "licenseType": zod.enum(['free', 'ultimate']).optional(),
  "allow": zod.array(zod.string()).optional(),
  "deny": zod.array(zod.string()).optional(),
  "activateAt": zod.string().datetime().optional(),
  "expirationAt": zod.string().datetime().optional(),
  "signature": zod.string().optional(),
  "hosts": zod.string().optional(),
  "vcpu": zod.string().optional(),
  "alerts": zod.string().optional(),
  "customerCode": zod.string().optional(),
  "deviceCode": zod.string().optional(),
  "status": zod.enum(['active', 'expired', 'expiring', 'invalid', 'revoked']).optional()
})


export const locationServiceListLocationsQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "locationKey": zod.enum(['zone', 'dc', 'rack']).optional(),
  "locationValue": zod.string().optional(),
  "parentId": zod.string().optional()
})

export const locationServiceListLocationsResponse = zod.object({
  "locations": zod.array(zod.object({
  "locationId": zod.string().optional(),
  "parentId": zod.string().optional(),
  "locationKey": zod.enum(['zone', 'dc', 'rack']).optional(),
  "locationValue": zod.string().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const locationServiceCreateLocationsBody = zod.object({
  "locationId": zod.string().optional(),
  "parentId": zod.string().optional(),
  "locationKey": zod.enum(['zone', 'dc', 'rack']).optional(),
  "locationValue": zod.string().optional()
})

export const locationServiceCreateLocationsResponse = zod.object({
  "locationId": zod.string().optional(),
  "parentId": zod.string().optional(),
  "locationKey": zod.enum(['zone', 'dc', 'rack']).optional(),
  "locationValue": zod.string().optional()
})


export const locationServiceGetLocationsParams = zod.object({
  "locationId": zod.string()
})

export const locationServiceGetLocationsResponse = zod.object({
  "locationId": zod.string().optional(),
  "parentId": zod.string().optional(),
  "locationKey": zod.enum(['zone', 'dc', 'rack']).optional(),
  "locationValue": zod.string().optional()
})


export const locationServiceDeleteLocationParams = zod.object({
  "locationId": zod.string()
})

export const locationServiceDeleteLocationResponse = zod.object({

})


export const locationServiceUpdateLocationsParams = zod.object({
  "locationId": zod.string()
})

export const locationServiceUpdateLocationsBody = zod.object({
  "location": zod.object({
  "locationId": zod.string().optional(),
  "parentId": zod.string().optional(),
  "locationKey": zod.enum(['zone', 'dc', 'rack']).optional(),
  "locationValue": zod.string().optional()
}).optional()
})

export const locationServiceUpdateLocationsResponse = zod.object({
  "locationId": zod.string().optional(),
  "parentId": zod.string().optional(),
  "locationKey": zod.enum(['zone', 'dc', 'rack']).optional(),
  "locationValue": zod.string().optional()
})


export const userServiceLoginBody = zod.object({
  "userId": zod.string(),
  "password": zod.string().optional()
})

export const userServiceLoginResponse = zod.object({

})


export const userServiceLogoutResponse = zod.object({

})


export const metricsServiceGetMetricsQueryParams = zod.object({
  "class": zod.enum(['unspecified', 'cluster', 'host', 'overview']).optional(),
  "group": zod.enum(['unspecified', 'overview', 'basic', 'advanced', 'resource', 'performance', 'process']).optional(),
  "type": zod.string().optional(),
  "name": zod.string().optional()
})

export const metricsServiceGetMetricsResponse = zod.object({
  "metrics": zod.array(zod.object({
  "class": zod.string().optional(),
  "group": zod.string().optional(),
  "type": zod.string().optional(),
  "order": zod.number().optional(),
  "displayName": zod.string().optional(),
  "name": zod.string().optional(),
  "description": zod.string().optional(),
  "metric": zod.object({
  "name": zod.string().optional(),
  "unit": zod.string().optional(),
  "description": zod.string().optional(),
  "minTidbVersion": zod.string().optional(),
  "maxTidbVersion": zod.string().optional(),
  "isBuiltin": zod.boolean().optional(),
  "expressions": zod.array(zod.object({
  "name": zod.string().optional(),
  "promql": zod.string().optional(),
  "promMetric": zod.string().optional(),
  "labels": zod.array(zod.string()).optional(),
  "type": zod.string().optional(),
  "legend": zod.string().optional(),
  "minTidbVersion": zod.string().optional(),
  "maxTidbVersion": zod.string().optional()
})).optional()
}).optional()
})).optional()
})


export const metricsServiceGetTopMetricConfigResponse = zod.object({
  "cacheFlushIntervalInMinutes": zod.number().optional()
})


export const metricsServiceGetTopMetricDataParams = zod.object({
  "name": zod.string()
})

export const metricsServiceGetTopMetricDataQueryParams = zod.object({
  "startTime": zod.string(),
  "endTime": zod.string(),
  "step": zod.string().optional(),
  "limit": zod.string().optional()
})

export const metricsServiceGetTopMetricDataResponse = zod.object({
  "status": zod.string().optional(),
  "data": zod.array(zod.object({
  "expr": zod.string().optional(),
  "legend": zod.string().optional(),
  "result": zod.array(zod.object({
  "metric": zod.object({
  "instance": zod.string().optional(),
  "sqlType": zod.string().optional(),
  "type": zod.string().optional(),
  "result": zod.string().optional(),
  "txnMode": zod.string().optional(),
  "job": zod.string().optional(),
  "device": zod.string().optional(),
  "fstype": zod.string().optional(),
  "mountpoint": zod.string().optional(),
  "module": zod.string().optional(),
  "kind": zod.string().optional(),
  "ping": zod.string().optional()
}).optional(),
  "values": zod.array(zod.object({
  "timestamp": zod.number().optional(),
  "value": zod.string().optional()
})).optional()
})).optional()
})).optional()
})


export const metricsServiceGetOverviewStatusQueryParams = zod.object({
  "taskStartTime": zod.string().optional(),
  "taskEndTime": zod.string().optional()
})

export const metricsServiceGetOverviewStatusResponse = zod.object({
  "clusters": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "hosts": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "alerts": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "alertLevels": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "brTasks": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "sysTasks": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "otherTasks": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional()
})


export const roleServiceListRolesQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "roleNameLike": zod.string().optional(),
  "roleName": zod.string().optional()
})

export const roleServiceListRolesResponse = zod.object({
  "roles": zod.array(zod.object({
  "id": zod.number().optional(),
  "roleName": zod.string().optional(),
  "roleType": zod.number().optional(),
  "roleTypeDesc": zod.string().optional(),
  "detail": zod.string().optional(),
  "note": zod.string().optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const roleServiceCreateRoleBody = zod.object({
  "id": zod.number().optional(),
  "roleName": zod.string().optional(),
  "roleType": zod.number().optional(),
  "roleTypeDesc": zod.string().optional(),
  "detail": zod.string().optional(),
  "note": zod.string().optional()
})

export const roleServiceCreateRoleResponse = zod.object({
  "id": zod.number().optional(),
  "roleName": zod.string().optional(),
  "roleType": zod.number().optional(),
  "roleTypeDesc": zod.string().optional(),
  "detail": zod.string().optional(),
  "note": zod.string().optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const roleServiceDeleteRoleParams = zod.object({
  "roleId": zod.number()
})

export const roleServiceDeleteRoleResponse = zod.object({

})


export const roleServiceUpdateRoleParams = zod.object({
  "roleId": zod.number()
})

export const roleServiceUpdateRoleBody = zod.object({
  "roleName": zod.string(),
  "roleType": zod.number().optional(),
  "detail": zod.string().optional(),
  "note": zod.string().optional()
})

export const roleServiceUpdateRoleResponse = zod.object({
  "id": zod.number().optional(),
  "roleName": zod.string().optional(),
  "roleType": zod.number().optional(),
  "roleTypeDesc": zod.string().optional(),
  "detail": zod.string().optional(),
  "note": zod.string().optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const tagServiceListTagsQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional()
})

export const tagServiceListTagsResponse = zod.object({
  "tags": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const tagServiceCreateTagBody = zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})

export const tagServiceCreateTagResponse = zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})


export const tagServiceGetTagParams = zod.object({
  "tagId": zod.string()
})

export const tagServiceGetTagResponse = zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})


export const tagServiceDeleteTagParams = zod.object({
  "tagId": zod.string()
})

export const tagServiceDeleteTagResponse = zod.object({

})


export const tagServiceUpdateTagParams = zod.object({
  "tagId": zod.string()
})

export const tagServiceUpdateTagBody = zod.object({
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})

export const tagServiceUpdateTagResponse = zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})


export const tagServiceGetTagWithBindingsParams = zod.object({
  "tagId": zod.string()
})

export const tagServiceGetTagWithBindingsResponse = zod.object({
  "tag": zod.object({
  "tagInfo": zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
}).optional(),
  "bindObjects": zod.array(zod.object({
  "resourceType": zod.enum(['TAG_BIND_RESOURCE_TYPE_UNSPECIFIED', 'HOST', 'TIUP', 'CLUSTER']).optional(),
  "resources": zod.array(zod.object({
  "resourceId": zod.string().optional(),
  "resourceName": zod.string()
}))
})).optional()
}).optional()
})


export const tagServiceBatchCreateTagsBody = zod.object({
  "tags": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
}))
})

export const tagServiceBatchCreateTagsResponse = zod.object({
  "tags": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})).optional()
})


export const tagServiceBindResourceBody = zod.object({
  "resourceType": zod.enum(['TAG_BIND_RESOURCE_TYPE_UNSPECIFIED', 'HOST', 'TIUP', 'CLUSTER']).optional(),
  "resourceId": zod.string(),
  "tagIds": zod.array(zod.string()).optional()
})

export const tagServiceBindResourceResponse = zod.object({
  "tags": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})).optional()
})


export const tagServiceBindTagBody = zod.object({
  "tagId": zod.string(),
  "bindObjects": zod.array(zod.object({
  "resourceType": zod.enum(['TAG_BIND_RESOURCE_TYPE_UNSPECIFIED', 'HOST', 'TIUP', 'CLUSTER']).optional(),
  "resources": zod.array(zod.object({
  "resourceId": zod.string().optional(),
  "resourceName": zod.string()
}))
})).optional()
})

export const tagServiceBindTagResponse = zod.object({
  "tag": zod.object({
  "tagInfo": zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
}).optional(),
  "bindObjects": zod.array(zod.object({
  "resourceType": zod.enum(['TAG_BIND_RESOURCE_TYPE_UNSPECIFIED', 'HOST', 'TIUP', 'CLUSTER']).optional(),
  "resources": zod.array(zod.object({
  "resourceId": zod.string().optional(),
  "resourceName": zod.string()
}))
})).optional()
}).optional()
})


export const tagServiceListTagsByResourceTypeQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "tagKey": zod.string().optional(),
  "keyword": zod.string().optional(),
  "resourceType": zod.enum(['TAG_BIND_RESOURCE_TYPE_UNSPECIFIED', 'HOST', 'TIUP', 'CLUSTER']).optional()
})

export const tagServiceListTagsByResourceTypeResponse = zod.object({
  "tags": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const tagServiceListTagKeysQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "keyword": zod.string().optional(),
  "resourceType": zod.enum(['TAG_BIND_RESOURCE_TYPE_UNSPECIFIED', 'HOST', 'TIUP', 'CLUSTER']).optional()
})

export const tagServiceListTagKeysResponse = zod.object({
  "tagKeys": zod.array(zod.string()).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const tagServiceListTagsWithBindingsQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "tagKeys": zod.array(zod.string()).optional(),
  "tagValueLike": zod.string().optional()
})

export const tagServiceListTagsWithBindingsResponse = zod.object({
  "tags": zod.array(zod.object({
  "tagInfo": zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
}).optional(),
  "bindObjects": zod.array(zod.object({
  "resourceType": zod.enum(['TAG_BIND_RESOURCE_TYPE_UNSPECIFIED', 'HOST', 'TIUP', 'CLUSTER']).optional(),
  "resources": zod.array(zod.object({
  "resourceId": zod.string().optional(),
  "resourceName": zod.string()
}))
})).optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const tiupsServiceListTiupsQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "searchValue": zod.string().optional(),
  "tagIds": zod.array(zod.string()).optional(),
  "hostIds": zod.array(zod.string()).optional()
})

export const tiupsServiceListTiupsResponse = zod.object({
  "tiups": zod.array(zod.object({
  "tiupId": zod.string().optional(),
  "name": zod.string().optional(),
  "tiupHome": zod.string().optional(),
  "version": zod.string().optional(),
  "credentialId": zod.string().optional(),
  "tags": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})).optional(),
  "description": zod.string().optional(),
  "hostId": zod.string().optional(),
  "host": zod.object({
  "hostId": zod.string(),
  "ip": zod.string().optional(),
  "hostName": zod.string().optional(),
  "sshPort": zod.number().optional(),
  "credentialId": zod.string().optional(),
  "osName": zod.string().optional(),
  "osVersion": zod.string().optional(),
  "osRelease": zod.string().optional(),
  "osArchitecture": zod.string().optional(),
  "hostType": zod.enum(['VM', 'PM']).optional(),
  "locationId": zod.string().optional(),
  "createdTime": zod.string().datetime().optional(),
  "updatedTime": zod.string().datetime().optional(),
  "credential": zod.object({
  "credentialId": zod.string().optional(),
  "credentialName": zod.string().optional(),
  "credentialType": zod.string().optional(),
  "userName": zod.string().optional()
}).optional()
}).optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const tiupsServiceCreateTiupsBody = zod.object({
  "hostId": zod.string().optional(),
  "tiupHome": zod.string().optional(),
  "description": zod.string().optional(),
  "name": zod.string().optional(),
  "tagIds": zod.array(zod.string()).optional()
})

export const tiupsServiceCreateTiupsResponse = zod.object({
  "tiupId": zod.string().optional(),
  "name": zod.string().optional(),
  "tiupHome": zod.string().optional(),
  "version": zod.string().optional(),
  "credentialId": zod.string().optional(),
  "tags": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})).optional(),
  "description": zod.string().optional(),
  "hostId": zod.string().optional(),
  "host": zod.object({
  "hostId": zod.string(),
  "ip": zod.string().optional(),
  "hostName": zod.string().optional(),
  "sshPort": zod.number().optional(),
  "credentialId": zod.string().optional(),
  "osName": zod.string().optional(),
  "osVersion": zod.string().optional(),
  "osRelease": zod.string().optional(),
  "osArchitecture": zod.string().optional(),
  "hostType": zod.enum(['VM', 'PM']).optional(),
  "locationId": zod.string().optional(),
  "createdTime": zod.string().datetime().optional(),
  "updatedTime": zod.string().datetime().optional(),
  "credential": zod.object({
  "credentialId": zod.string().optional(),
  "credentialName": zod.string().optional(),
  "credentialType": zod.string().optional(),
  "userName": zod.string().optional()
}).optional()
}).optional()
})


export const tiupsServiceGetTiupsParams = zod.object({
  "tiupId": zod.string()
})

export const tiupsServiceGetTiupsResponse = zod.object({
  "tiupId": zod.string().optional(),
  "name": zod.string().optional(),
  "tiupHome": zod.string().optional(),
  "version": zod.string().optional(),
  "credentialId": zod.string().optional(),
  "tags": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})).optional(),
  "description": zod.string().optional(),
  "hostId": zod.string().optional(),
  "host": zod.object({
  "hostId": zod.string(),
  "ip": zod.string().optional(),
  "hostName": zod.string().optional(),
  "sshPort": zod.number().optional(),
  "credentialId": zod.string().optional(),
  "osName": zod.string().optional(),
  "osVersion": zod.string().optional(),
  "osRelease": zod.string().optional(),
  "osArchitecture": zod.string().optional(),
  "hostType": zod.enum(['VM', 'PM']).optional(),
  "locationId": zod.string().optional(),
  "createdTime": zod.string().datetime().optional(),
  "updatedTime": zod.string().datetime().optional(),
  "credential": zod.object({
  "credentialId": zod.string().optional(),
  "credentialName": zod.string().optional(),
  "credentialType": zod.string().optional(),
  "userName": zod.string().optional()
}).optional()
}).optional()
})


export const tiupsServiceDeleteTiupsParams = zod.object({
  "tiupId": zod.string()
})

export const tiupsServiceDeleteTiupsResponse = zod.object({

})


export const tiupsServiceUpdateTiupsParams = zod.object({
  "tiupId": zod.string()
})

export const tiupsServiceUpdateTiupsBody = zod.object({
  "tiups": zod.object({
  "tagIds": zod.array(zod.string()).optional(),
  "description": zod.string().optional(),
  "name": zod.string().optional()
}).optional()
})

export const tiupsServiceUpdateTiupsResponse = zod.object({
  "tiupId": zod.string().optional(),
  "name": zod.string().optional(),
  "tiupHome": zod.string().optional(),
  "version": zod.string().optional(),
  "credentialId": zod.string().optional(),
  "tags": zod.array(zod.object({
  "tagId": zod.string().optional(),
  "tagKey": zod.string().optional(),
  "tagValue": zod.string()
})).optional(),
  "description": zod.string().optional(),
  "hostId": zod.string().optional(),
  "host": zod.object({
  "hostId": zod.string(),
  "ip": zod.string().optional(),
  "hostName": zod.string().optional(),
  "sshPort": zod.number().optional(),
  "credentialId": zod.string().optional(),
  "osName": zod.string().optional(),
  "osVersion": zod.string().optional(),
  "osRelease": zod.string().optional(),
  "osArchitecture": zod.string().optional(),
  "hostType": zod.enum(['VM', 'PM']).optional(),
  "locationId": zod.string().optional(),
  "createdTime": zod.string().datetime().optional(),
  "updatedTime": zod.string().datetime().optional(),
  "credential": zod.object({
  "credentialId": zod.string().optional(),
  "credentialName": zod.string().optional(),
  "credentialType": zod.string().optional(),
  "userName": zod.string().optional()
}).optional()
}).optional()
})


export const tiupsServiceGetTiupsClusterParams = zod.object({
  "tiupId": zod.string()
})

export const tiupsServiceGetTiupsClusterResponse = zod.object({
  "tiupsClusters": zod.array(zod.object({
  "clusterId": zod.string().optional(),
  "clusterName": zod.string().optional(),
  "user": zod.string().optional(),
  "version": zod.string().optional(),
  "metaPath": zod.string().optional(),
  "privateKeyPath": zod.string().optional(),
  "managed": zod.boolean().optional()
})).optional()
})


export const userServiceListUsersQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "nameLike": zod.string().optional(),
  "emailLike": zod.string().optional(),
  "roleName": zod.string().optional()
})

export const userServiceListUsersResponse = zod.object({
  "users": zod.array(zod.object({
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.number().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const userServiceCreateUserBody = zod.object({
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.number().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional()
})

export const userServiceCreateUserResponse = zod.object({
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.number().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const userServiceGetUserProfileResponse = zod.object({
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string(),
  "note": zod.string().optional(),
  "phone": zod.string().optional()
})


export const userServiceGetUserParams = zod.object({
  "userId": zod.string()
})

export const userServiceGetUserResponse = zod.object({
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.number().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const userServiceDeleteUserParams = zod.object({
  "userId": zod.string()
})

export const userServiceDeleteUserResponse = zod.object({

})


export const userServiceUpdateUserParams = zod.object({
  "userId": zod.string()
})

export const userServiceUpdateUserBody = zod.object({
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "userType": zod.number().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional()
})

export const userServiceUpdateUserResponse = zod.object({
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.number().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const userServiceResetPasswordParams = zod.object({
  "userId": zod.string()
})

export const userServiceResetPasswordBody = zod.object({
  "newPassword": zod.string()
})

export const userServiceResetPasswordResponse = zod.object({

})


export const userServiceChangePasswordBody = zod.object({
  "userId": zod.string(),
  "oldPassword": zod.string().optional(),
  "newPassword": zod.string()
})

export const userServiceChangePasswordResponse = zod.object({

})


export const userServiceValidateSessionResponse = zod.object({
  "userId": zod.string()
})


export const apiKeyServiceGetTemErrorDetailResponse = zod.object({
  "type": zod.string().optional(),
  "locale": zod.string().optional(),
  "message": zod.string().optional()
})

