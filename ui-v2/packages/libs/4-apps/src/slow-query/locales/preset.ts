import { useTn } from "@pingcap-incubator/tidb-dashboard-lib-utils"

// @ts-expect-error @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function useLocales() {
  const { tk } = useTn("slow-query")
  // used for gogocode to scan and generate en.json before build
  tk("fields.instance", "{{distro.tidb}} Instance")
  tk(
    "fields.instance.desc",
    "The {{distro.tidb}} address that handles the query",
  )
  tk("fields.connection_id", "Connection ID")
  tk("fields.connection_id.desc", "Unique connection ID of the query")
  tk("fields.sql", "Query")
  tk("fields.query", "Query")
  tk("fields.timestamp", "Finish Time")
  tk("fields.timestamp.desc", "The time this query finished execution")
  tk("fields.query_time", "Latency")
  tk("fields.query_time.desc", "Execution time of the query")
  tk("fields.memory_max", "Max Memory")
  tk("fields.memory_max.desc", "Maximum memory usage of the query")
  tk("fields.disk_max", "Max Disk")
  tk("fields.disk_max.desc", "Maximum disk usage of the query")
  tk("fields.digest", "Query Template ID")
  tk("fields.digest.desc", "a.k.a. Query digest")
  tk("fields.is_internal", "Is Internal?")
  tk("fields.is_internal.desc", "Whether this is an internal query")
  tk("fields.success", "Is Success?")
  tk("fields.success.desc", "Whether query is executed successfully")
  tk("fields.prepared", "Is Prepared?")
  tk("fields.prepared.desc", "Is Generated by the prepare statement")
  tk("fields.plan_from_cache", "Is Plan from Cache?")
  tk("fields.plan_from_binding", "Is Plan from Binding?")
  tk("fields.result", "Result")
  tk("fields.result.desc", "Whether query is executed successfully")
  tk("fields.index_names", "Index Names")
  tk("fields.index_names.desc", "The name of the used index")
  tk("fields.stats", "Used Statistics")
  tk("fields.backoff_types", "Backoff Types")
  tk("fields.user", "Execution User")
  tk("fields.user.desc", "The user that executes the query")
  tk("fields.host", "Client Address")
  tk("fields.host.desc", "The address of the client that sends the query")
  tk("fields.db", "Execution Database")
  tk("fields.db.desc", "The database used to execute the query")
  tk("fields.query_time_2", "Query Time")
  tk(
    "fields.query_time_2.desc",
    "The elapsed wall time when execution the query",
  )
  tk("fields.parse_time", "Parse Time")
  tk("fields.parse_time.desc", "Time consumed when parsing the query")
  tk("fields.compile_time", "Generate Plan Time")
  tk("fields.compile_time.desc", "Time consumed when generating the plan")
  tk("fields.rewrite_time", "Rewrite Plan Time")
  tk("fields.rewrite_time.desc", "Time consumed when rewriting the plan")
  tk("fields.preproc_subqueries_time", "Preprocess Sub-Query Time")
  tk(
    "fields.preproc_subqueries_time.desc",
    "Time consumed when pre-processing the subquery during the rewrite plan phase",
  )
  tk("fields.optimize_time", "Optimize Plan Time")
  tk("fields.optimize_time.desc", "Time consumed when optimizing the plan")
  tk("fields.wait_ts", "Get Start Ts Time")
  tk(
    "fields.wait_ts.desc",
    "Time consumed when getting a start timestamp when transaction begins",
  )
  tk("fields.cop_time", "Coprocessor Executor Time")
  tk(
    "fields.cop_time.desc",
    "The elapsed wall time when {{distro.tidb}} Coprocessor executor waiting all Coprocessor requests to finish (note: when there are JOIN in SQL statement, multiple {{distro.tidb}} Coprocessor executors may be running in parallel, which may cause this time not being a wall time)",
  )
  tk("fields.wait_time", "Coprocessor Wait Time")
  tk(
    "fields.wait_time.desc",
    "The total time of Coprocessor request is prepared and wait to execute in {{distro.tikv}}, which may happen when retrieving a snapshot though Raft concensus protocol (note: {{distro.tikv}} waits requests in parallel so that this is not a wall time)",
  )
  tk("fields.process_time", "Coprocessor Process Time")
  tk(
    "fields.process_time.desc",
    "The total time of Coprocessor request being executed in {{distro.tikv}} (note: {{distro.tikv}} executes requests in parallel so that this is not a wall time)",
  )
  tk("fields.backoff_time", "Execution Backoff Time")
  tk(
    "fields.backoff_time.desc",
    "The total backoff waiting time before retry when a query encounters errors (note: there may be multiple backoffs in parallel so that this may not be a wall time)",
  )
  tk("fields.lock_keys_time", "Lock Keys Time")
  tk(
    "fields.lock_keys_time.desc",
    "Time consumed when locking keys in pessimistic transaction",
  )
  tk("fields.get_commit_ts_time", "Get Commit Ts Time")
  tk(
    "fields.get_commit_ts_time.desc",
    "Time consumed when getting a commit timestamp for 2PC commit phase when transaction commits",
  )
  tk("fields.local_latch_wait_time", "Local Latch Wait Time")
  tk(
    "fields.local_latch_wait_time.desc",
    "Time consumed when {{distro.tidb}} waits for the lock in the current {{distro.tidb}} instance before 2PC commit phase when transaction commits",
  )
  tk("fields.resolve_lock_time", "Resolve Lock Time")
  tk(
    "fields.resolve_lock_time.desc",
    "Time consumed when {{distro.tidb}} resolves locks from other transactions in 2PC prewrite phase when transaction commits",
  )
  tk("fields.prewrite_time", "Prewrite Time")
  tk(
    "fields.prewrite_time.desc",
    "Time consumed in 2PC prewrite phase when transaction commits",
  )
  tk("fields.wait_prewrite_binlog_time", "Wait Binlog Prewrite Time")
  tk(
    "fields.wait_prewrite_binlog_time.desc",
    "Time consumed when waiting Binlog prewrite to finish",
  )
  tk("fields.commit_time", "Commit Time")
  tk(
    "fields.commit_time.desc",
    "Time consumed in 2PC commit phase when transaction commits",
  )
  tk("fields.commit_backoff_time", "Commit Backoff Time")
  tk(
    "fields.commit_backoff_time.desc",
    "The total backoff waiting time when 2PC commit encounters errors (note: there may be multiple backoffs in parallel so that this may not be a wall time)",
  )
  tk("fields.write_sql_response_total", "Send Response Time")
  tk(
    "fields.write_sql_response_total.desc",
    "Time consumed when sending response to the SQL client",
  )
  tk("fields.exec_retry_time", "Retried Execution Time")
  tk(
    "fields.exec_retry_time.desc",
    "Wall time consumed when SQL statement is retried and executed again, except for the last execution",
  )
  tk("fields.request_count", "Request Count")
  tk("fields.process_keys", "Process Keys")
  tk("fields.total_keys", "Total Keys")
  tk("fields.total_keys.desc", "Total keys of the query")
  tk("fields.cop_proc_addr", "Copr Address (Process)")
  tk(
    "fields.cop_proc_addr.desc",
    "The address of the {{distro.tikv}} that takes most time process the Coprocessor request",
  )
  tk("fields.cop_wait_addr", "Copr Address (Wait)")
  tk(
    "fields.cop_wait_addr.desc",
    "The address of the {{distro.tikv}} that takes most time wait the Coprocessor request",
  )
  tk("fields.txn_start_ts", "Start Timestamp")
  tk(
    "fields.txn_start_ts.desc",
    "Transaction start timestamp, a.k.a. Transaction ID",
  )
  tk("fields.write_keys", "Write Keys")
  tk("fields.write_size", "Write Size")
  tk("fields.prewrite_region", "Prewrite Regions")
  tk("fields.txn_retry", "Transaction Retries")
  tk("fields.prev_stmt", "Previous Query")
  tk("fields.plan", "Execution Plan")
  tk("fields.cop_proc_avg", "Mean Cop Proc")
  tk("fields.cop_wait_avg", "Mean Cop Wait")
  tk("fields.rocksdb_delete_skipped_count", "RocksDB Skipped Deletions")
  tk(
    "fields.rocksdb_delete_skipped_count.desc",
    "Total number of deleted (a.k.a. tombstone) key versions that are skipped during iteration (RocksDB delete_skipped_count)",
  )
  tk("fields.rocksdb_key_skipped_count", "RocksDB Skipped Keys")
  tk(
    "fields.rocksdb_key_skipped_count.desc",
    "Total number of keys skipped during iteration (RocksDB key_skipped_count)",
  )
  tk("fields.rocksdb_block_cache_hit_count", "RocksDB Block Cache Hits")
  tk(
    "fields.rocksdb_block_cache_hit_count.desc",
    "Total number of hits from the block cache (RocksDB block_cache_hit_count)",
  )
  tk("fields.rocksdb_block_read_count", "RocksDB Block Reads")
  tk(
    "fields.rocksdb_block_read_count.desc",
    "Total number of blocks RocksDB read from file (RocksDB block_read_count)",
  )
  tk("fields.rocksdb_block_read_byte", "RocksDB Read Size")
  tk(
    "fields.rocksdb_block_read_byte.desc",
    "Total number of bytes RocksDB read from file (RocksDB block_read_byte)",
  )
  tk("fields.ru", "RU")
  tk("fields.ru.desc", "Request units")
  tk("fields.resource_group", "Resource Group")
  tk(
    "fields.resource_group.desc",
    "The resource group that the query belongs to",
  )
  tk("fields.time_queued_by_rc", "Total Time Queued by RC")
  tk(
    "fields.time_queued_by_rc.desc",
    "The total wait time spent in the resource queue (note: {{distro.tikv}} executes requests in parallel so that this is not a wall time)",
  )

  // additional fields
  tk("fields.backoff_detail", "Backoff Detail")
  tk("fields.backoff_total", "Backoff Total")
  tk("fields.binary_plan", "Binary Plan")
  tk("fields.cop_proc_max", "Max Cop Proc")
  tk("fields.cop_proc_p90", "P90 Cop Proc")
  tk("fields.cop_wait_max", "Max Cop Wait")
  tk("fields.cop_wait_p90", "P90 Cop Wait")
  tk("fields.exec_retry_count", "Retried Execution Count")
  tk("fields.has_more_results", "Has More Results?")
  tk("fields.is_explicit_txn", "Is Explicit Transaction?")
  tk("fields.pd_total", "PD Total")
  tk("fields.kv_total", "KV Total")
  tk("fields.preproc_subqueries", "Preprocess Sub-Query")
  tk("fields.request_unit_read", "Request Unit Read")
  tk("fields.request_unit_write", "Request Unit Write")
  tk("fields.session_alias", "Session Alias")
  tk("fields.result_rows", "Result Rows")
  tk("fields.warnings", "Warnings")
  tk("fields.plan_digest", "Plan Digest")

  tk("fields.tidb_cpu_time", "{{distro.tidb}} CPU Time")
  tk("fields.tikv_cpu_time", "{{distro.tikv}} CPU Time")
}
