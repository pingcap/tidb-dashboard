// Code generated by mockery v2.53.5. DO NOT EDIT.

package topo

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTopologyProvider is an autogenerated mock type for the TopologyProvider type
type MockTopologyProvider struct {
	mock.Mock
}

// GetAlertManager provides a mock function with given fields: ctx
func (_m *MockTopologyProvider) GetAlertManager(ctx context.Context) (*AlertManagerInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertManager")
	}

	var r0 *AlertManagerInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*AlertManagerInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *AlertManagerInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AlertManagerInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGrafana provides a mock function with given fields: ctx
func (_m *MockTopologyProvider) GetGrafana(ctx context.Context) (*GrafanaInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGrafana")
	}

	var r0 *GrafanaInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*GrafanaInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *GrafanaInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GrafanaInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPD provides a mock function with given fields: ctx
func (_m *MockTopologyProvider) GetPD(ctx context.Context) ([]PDInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPD")
	}

	var r0 []PDInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]PDInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []PDInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PDInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrometheus provides a mock function with given fields: ctx
func (_m *MockTopologyProvider) GetPrometheus(ctx context.Context) (*PrometheusInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPrometheus")
	}

	var r0 *PrometheusInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*PrometheusInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *PrometheusInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PrometheusInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTiDB provides a mock function with given fields: ctx
func (_m *MockTopologyProvider) GetTiDB(ctx context.Context) ([]TiDBInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTiDB")
	}

	var r0 []TiDBInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]TiDBInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []TiDBInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TiDBInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTiFlash provides a mock function with given fields: ctx
func (_m *MockTopologyProvider) GetTiFlash(ctx context.Context) ([]TiFlashStoreInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTiFlash")
	}

	var r0 []TiFlashStoreInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]TiFlashStoreInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []TiFlashStoreInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TiFlashStoreInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTiKV provides a mock function with given fields: ctx
func (_m *MockTopologyProvider) GetTiKV(ctx context.Context) ([]TiKVStoreInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTiKV")
	}

	var r0 []TiKVStoreInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]TiKVStoreInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []TiKVStoreInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TiKVStoreInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTopologyProvider creates a new instance of MockTopologyProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTopologyProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTopologyProvider {
	mock := &MockTopologyProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
